{"version":3,"file":"565.d9608103c135f593.js","mappings":"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","names":["i0","routes","path","redirectTo","pathMatch","component","LoginComponent","constructor","fb","authservice","router","toastr","_titleservice","_Activatedroute","crud","this","queryParams","setTitle","loginForm","group","email","Validators","password","remember","ngOnInit","addToCart","type","_value","shop","localStorage","getItem","patchValue","decryption","ngAfterViewInit","markAsUntouched","loginFormSubmit","valid","data","value","encryption","setItem","removeItem","login","subscribe","res","console","log","on_stop","JSON","stringify","token","success","message","timeOut","user_type","roles","permissions","map","key","permission","role","access","getRequest","requestUrl","name","then","response","dashboard_json","forEach","ele","dashBoardPermission","short_code","is_show","navigate","navigateByUrl","error","err","detail","markAllControlsAsTouched","formGroup","Object","values","controls","control","markAsTouched","FormGroup","static","core","selectors","ctx","loadChildren","Promise","m","RegisterModule","__webpack_require__","ForgetPasswordModule","ResetPasswordModule","OtpModule","AuthRoutingModule","RouterModule","AuthModule","CommonModule","ReactiveFormsModule","FormsModule","NgSelectModule"],"sourceRoot":"webpack:///","sources":["./src/app/auth/login/login.component.html","./src/app/auth/auth-routing.module.ts","./src/app/auth/login/login.component.ts","./src/app/auth/auth.module.ts"],"sourcesContent":["<div class=\"container-fluid \">\n  <div class=\"row inner-box\">\n    <div class=\"col-sm-5 p-0 mob-left\">\n      <img class=\"bnrimg\" src=\"assets/images/Login.webp\" alt=\"login\">\n    </div>\n    <div class=\"col-sm-7 mob-right\">\n      <div class=\"login-box\">\n        <div class=\"login-box-inner\">\n          <h2>Login</h2>\n          <p>Welcome</p>\n          <form [formGroup]=\"loginForm\" (ngSubmit)=\"loginFormSubmit()\">\n            <div class=\"margins\">\n              <label for=\"email\" class=\"form-label\">Email:</label>\n              <input type=\"email\" class=\"form-control\" formControlName=\"email\" placeholder=\"Enter email\">\n              <small class=\"text-danger\"\n                *ngIf=\"loginForm.controls['email'].touched && loginForm.controls['email'].hasError('required')\">\n                Please enter email.\n              </small>\n              <small class=\"text-danger\" *ngIf=\"loginForm.controls['email'].hasError('email') \">\n                Please enter valid email address.\n              </small>\n            </div>\n            <div class=\"margins iconSwitch\">\n              <label for=\"pwd\" class=\"form-label\">Password:</label>\n              <input [type]=\"textType\" class=\"form-control\" formControlName=\"password\"\n                [class.is-invalid]=\"loginForm.controls['password'].dirty && loginForm.controls['password'].hasError('required')\"\n                placeholder=\"Enter password\">\n              <img class=\" eyeIcon\" [src]=\"textType == 'password'?'assets/images/eye.svg':'assets/images/eye-off.svg'\"\n                (click)=\"textType=(textType=='password'?'text':'password')\" />\n              <small class=\"text-danger\"\n                *ngIf=\"loginForm.controls['password'].touched && loginForm.controls['password'].hasError('required')\">\n                Please enter password.\n              </small>\n            </div>\n            <div class=\"remember-me \">\n              <div class=\"\">\n                <input class=\"form-check-input\" type=\"checkbox\" formControlName=\"remember\"> Remember me\n              </div>\n              <div class=\"align-right\">\n                <a routerLink=\"/auth/forgot-password\">Forgot Password ?</a>\n              </div>\n            </div>\n            <div class=\"d-grid\" style=\"cursor: pointer;\">\n              <button type=\"submit\" class=\"btn btn-primary btn-block lbtn\">Login</button>\n            </div>\n            <div class=\" text-center reg\">\n              <span>Don't have an account? </span><a routerLink=\"/auth/register\">Register</a>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\n\nconst routes: Routes = [\n  {path:'',redirectTo:'login',pathMatch:'full'},\n  {path:'login',component:LoginComponent},\n  {path:'register',loadChildren: () => import(\"./register/register.module\").then(m => m.RegisterModule) },\n  {path:'forgot-password',loadChildren:() => import(\"./forget-password/forget-password.module\").then(m => m.ForgetPasswordModule)},\n  {path:'reset-password/:email',loadChildren:() => import(\"./reset-password/reset-password.module\").then(m => m.ResetPasswordModule) },\n  {path:'otp/:email', loadChildren: () => import(\"./otp/otp.module\").then(m => m.OtpModule)},\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Title } from '@angular/platform-browser';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { decryption, encryption } from 'src/app/encryption';\nimport { AuthService } from '../services/auth.service';\nimport { CrudService } from 'src/app/services/crud.service';\nimport { requestUrl } from 'src/app/services/adminReqUrl.const';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  name: any = 'jitendra yadav';\n  permissions: any = {};\n  textType: any = 'password'\n  loginForm: FormGroup;\n  type: any = this._Activatedroute.queryParams\n  addToCart: boolean = false;\n  dashBoardPermission: any = {};\n  constructor(private fb: FormBuilder, private authservice: AuthService, private router: Router,\n    private toastr: ToastrService, private _titleservice: Title, private _Activatedroute: ActivatedRoute,\n    private crud: CrudService) {\n    this._titleservice.setTitle('Login | Viezu');\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required]],\n      remember: ['', []],\n    });\n  }\n\n  ngOnInit(): void {\n    this.addToCart = this.type['_value'].shop;\n    if (localStorage.getItem('email')) {\n      this.loginForm.patchValue({\n        \"email\": localStorage.getItem('email'),\n        \"password\": decryption(localStorage.getItem('password')),\n        \"remember\": 'true',\n      });\n    }\n    // this.loginFormSubmit();\n  }\n\n  ngAfterViewInit() {\n    this.loginForm.markAsUntouched();\n  }\n\n  loginFormSubmit() {\n    if (this.loginForm.valid) {\n      let data = {\n        \"email\": this.loginForm.value.email,\n        \"password\": encryption(this.loginForm.value.password)\n      };\n\n      if (this.loginForm.value.remember) {\n        localStorage.setItem('email', this.loginForm.value.email);\n        localStorage.setItem('password', encryption(this.loginForm.value.password));\n      }\n      else {\n        localStorage.removeItem('email');\n        localStorage.removeItem('password');\n      }\n\n      this.authservice.login(data).subscribe((res: any) => {\n        console.log(res, 'login response');\n\n        if (res.data.on_stop == false) {\n          localStorage.setItem('userdetails', JSON.stringify(res.data));\n          localStorage.setItem('token', res.data.token);\n          this.toastr.success(res.message, '', { timeOut: 2000 });\n          if (res.data.user_type == 5 || res.data.user_type == 2) {\n            res.data.roles.permissions.map((key: any) => {\n              this.permissions[key.permission] = res.data.role == 'AIREMAP_ADMIN' ? 'Full access' : key.access;\n            })\n            localStorage.setItem('permissions', JSON.stringify(this.permissions));\n            this.crud.getRequest(`${requestUrl.adminDashboardPermissionManage}?role_name=${res.data.roles.name}`).then((response: any) => {\n              if (response) {\n                response.data[0].dashboard_json.forEach((ele: any) => {\n                  // this.dashBoardPermission[ele.short_code] = res.data.data.roles.name == 'Admin Management' ? true : ele.is_show;\n                  this.dashBoardPermission[ele.short_code] = ele.is_show;\n                });\n                localStorage.setItem('dashBoardPermissions', JSON.stringify(this.dashBoardPermission));\n                this.router.navigate(['/admin']);\n              }\n            })\n          }\n          else if (res.data.user_type == 3 || res.data.user_type == 4 || res.data.user_type == 6 || res.data.user_type == 7) {\n            if (this.addToCart) {\n              this.router.navigateByUrl('/credit/shop');\n            } else\n              this.router.navigate(['/dashboard']);\n          }\n        }\n        else {\n          this.toastr.error('Your account has been stopped by administrator, please contact support.');\n        }\n\n      },\n        (err: any) => {\n          this.toastr.error(err.error.detail, '', { timeOut: 5000 });\n        });\n    } else\n      this.markAllControlsAsTouched(this.loginForm);\n\n\n  }\n  markAllControlsAsTouched(formGroup: FormGroup) {\n    Object.values(formGroup.controls).forEach(control => {\n      control.markAsTouched();\n\n      if (control instanceof FormGroup) {\n        this.markAllControlsAsTouched(control);\n      }\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { FormsModule , ReactiveFormsModule } from '@angular/forms';\nimport { AuthComponent } from './auth.component';\nimport { LoginComponent } from './login/login.component';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\n\n@NgModule({\n  declarations: [\n    AuthComponent,\n    LoginComponent,\n  ],\n  imports: [\n    CommonModule,\n    AuthRoutingModule,\n    ReactiveFormsModule,\n    FormsModule,\n    NgSelectModule\n  ]\n})\nexport class AuthModule { }\n"],"x_google_ignoreList":[]}