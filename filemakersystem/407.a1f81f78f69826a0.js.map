{"version":3,"file":"407.a1f81f78f69826a0.js","mappings":"2PA8CcA,gBAEEA,6CACFA,SC3Cd,MAAMC,EAAe,CACnB,CACEC,KAAK,GACLC,UCKqB,MAAnB,MAAOC,EAKXC,YAAqBC,EAAyBC,EAAkCC,EACtEP,EAA+BQ,EAA+BC,GADnDC,UAAyBA,mBAAkCA,cACtEA,aAA+BA,cAA+BA,qBACtEA,KAAKD,cAAcE,SAAS,aAC5BD,KAAKE,QAAUF,KAAKL,GAAGQ,MAAM,CAC3BC,KAAM,CAAC,GAAI,CAACC,gBACZC,KAAM,CAAC,GAAI,CAACD,gBACZE,KAAM,CAAC,GAAI,CAACF,gBACZG,KAAM,CAAC,GAAI,CAACH,iBAEhB,CAEAI,WACET,KAAKU,SAAQC,KAAWX,KAAKV,MAAMsB,SAASC,SAASC,IAAI,SAC3D,CAEAC,gBAMEf,KAAKJ,YAAYoB,UALN,CACTN,MAASV,KAAKU,MACdO,IAAQjB,KAAKE,QAAQgB,MAAMd,KAAOJ,KAAKE,QAAQgB,MAAMZ,KAAON,KAAKE,QAAQgB,MAAMX,KAAOP,KAAKE,QAAQgB,MAAMV,OAG1EW,UAAWC,IAC1CpB,KAAKF,OAAOuB,QAAQD,EAAIE,QAAS,GAAI,CAAEC,QAAS,MAChDvB,KAAKH,OAAO2B,SAAS,CAAC,0BAAwBC,KAAWzB,KAAKU,QAAO,EAEpEgB,IACC1B,KAAKF,OAAO6B,MAAMD,EAAIC,MAAMC,OAAQ,GAAI,CAAEL,QAAS,KAAM,EAE/D,CAEAM,YACE7B,KAAKJ,YAAYkC,eAAe,CAAEpB,MAASV,KAAKU,QAASS,UAAWC,IAClEpB,KAAKF,OAAOuB,QAAQD,EAAIE,QAAS,GAAI,CAAEC,QAAS,KAAM,EAGrDG,IACC1B,KAAKF,OAAO6B,MAAMD,EAAIC,MAAMC,OAAQ,GAAI,CAAEL,QAAS,KAAM,EAE/D,CACAQ,WAAWC,EAAYC,EAAsBC,GACxB,cAAfF,EAAMG,MAAuC,aAAfH,EAAMG,MAAsC,cAAfH,EAAMG,MAAuC,gBAAfH,EAAMG,MAAyC,WAAfH,EAAMG,MAAqC,OAAhBD,GACtJA,EAAYE,QAEK,cAAfJ,EAAMG,MAA4C,OAApBF,GAChCA,EAAgBG,OACpB,CAACC,kDAlDU5C,GAAY6C,6GAAZ7C,EAAY8C,ooCFdzBlD,iBAA8B,UAA9BA,CAA8B,WAKxBA,iBACFA,QACAA,iBAAgC,UAAhCA,CAAgC,UAAhCA,CAAgC,QAKtBA,qBAASA,QACbA,eAA0BA,uEAAyDA,QAEnFA,mBAA4BA,mCAAYmD,iBAAe,GACrDnD,kBAAuB,eACmBA,iBAAIA,QAE5CA,mBAAqB,kBACyCA,4DAASA,qBAAmB,KAAIoD,GAAS,GAArGpD,QAEAA,wBACEA,wEAASA,0BAAkC,GAD7CA,QAEAA,wBACEA,wEAASA,0BAAkC,GAD7CA,QAEAA,wBACEA,4DAASA,uBAA2B,MAAK,GAD3CA,UAoBFA,uBAIFA,QAEAA,mBAAoB,gBACwEA,uBACrFA,UAGPA,mBAAkC,WAC7BA,gCAASmD,aAAW,GAAEnD,uBAAUA,qBAAI,OA3CrCA,uCAgCCA,oGAMmBA,gVEvCvBI,CAAY,ODOlB,IAAMiD,EAAS,MAAhB,MAAOA,EAASL,kDAATK,EAAS,sCAATA,IAASL,wCALlBM,KACAC,KACAC,cAAsBvD,aAGboD,CAAS","names":["i0","route","path","component","OtpComponent","constructor","fb","authservice","router","toastr","_titleservice","this","setTitle","otpForm","group","otp0","Validators","otp1","otp2","otp3","ngOnInit","email","decryption","snapshot","paramMap","get","otpFormSubmit","otpVerify","otp","value","subscribe","res","success","message","timeOut","navigate","encryption","err","error","detail","resendOtp","forgotPassword","moveToNext","event","previousElement","nextElement","code","focus","static","core","selectors","ctx","_r1","OtpModule","CommonModule","ReactiveFormsModule","RouterModule"],"sourceRoot":"webpack:///","sources":["./src/app/auth/otp/otp.component.html","./src/app/auth/otp/otp.module.ts","./src/app/auth/otp/otp.component.ts"],"sourcesContent":["<div class=\"container-fluid \">\n\n  <div class=\"row inner-box\">\n    <div class=\"col-sm-5 p-0 mob-left\">\n\n      <img class=\"bnrimg\" src=\"assets/images/enter-otp.webp\" alt=\"otp\">\n    </div>\n    <div class=\"col-sm-7 mob-right\">\n\n      <div class=\"login-box\">\n\n        <div class=\"login-box-inner\">\n          <h2>Enter OTP</h2>\n          <p style=\"color:#3F424B\"> Please enter the OTP that has been send to your email ID </p>\n\n          <form [formGroup]=\"otpForm\" (ngSubmit)=\"otpFormSubmit()\">\n            <div class=\"mb-3 mt-3\">\n              <label for=\"inputlg\" class=\"form-label\">OTP:</label>\n\n              <div class=\"otp-box\">\n                <input class=\"m-2 text-center form-control rounded\" #digit1 (keyup)=\"moveToNext($event, null, digit2)\"\n                  formControlName=\"otp0\" type=\"text\" id=\"first\" maxlength=\"1\" />\n                <input class=\"m-2 text-center form-control rounded\" #digit2 formControlName=\"otp1\" type=\"text\"\n                  (keyup)=\"moveToNext($event, digit1, digit3)\" id=\"second\" maxlength=\"1\" />\n                <input class=\"m-2 text-center form-control rounded\" type=\"text\" #digit3 formControlName=\"otp2\"\n                  (keyup)=\"moveToNext($event, digit2, digit4)\" id=\"third\" maxlength=\"1\" />\n                <input class=\"m-2 text-center form-control rounded\" type=\"text\" #digit4 formControlName=\"otp3\"\n                  (keyup)=\"moveToNext($event, digit3, null)\" id=\"four\" maxlength=\"1\" />\n                <!-- <input type=\"text\" formControlName=\"otp1\" class=\" form-control-lg\" maxlength=\"1\" size=\"1\">\n                <input type=\"text\" formControlName=\"otp2\" class=\" form-control-lg\" maxlength=\"1\" size=\"1\">\n                <input type=\"text\" formControlName=\"otp3\" class=\" form-control-lg\" maxlength=\"1\" size=\"1\">\n                <input type=\"text\" formControlName=\"otp4\" class=\" form-control-lg\" maxlength=\"1\" size=\"1\"> -->\n              </div>\n\n              <!-- <p class=\"text-danger\"\n                *ngIf=\"otpForm.controls['otp0'].dirty && otpForm.controls['otp0'].hasError('required')\">\n                Please enter enter 4 digit OTP.\n              </p>\n              <p class=\"text-danger\"\n                *ngIf=\"otpForm.controls['otp1'].dirty && otpForm.controls['otp2'].hasError('required')\">\n                Please enter enter 4 digit OTP.\n              </p>\n              <p class=\"text-danger\"\n                *ngIf=\"otpForm.controls['otp2'].dirty && otpForm.controls['otp3'].hasError('required')\">\n                Please enter enter 4 digit OTP.\n              </p> -->\n              <p class=\"text-danger\"\n                *ngIf=\"otpForm.controls['otp3'].dirty && otpForm.controls['otp3'].hasError('required')\">\n                Please enter enter 4 digit OTP.\n              </p>\n            </div>\n\n            <div class=\"d-grid\">\n              <button type=\"submit\" [disabled]=\"otpForm.invalid\" class=\"btn btn-primary btn-block lbtn\">Verify\n                OTP</button>\n            </div>\n\n            <div class=\"mt-3 text-center reg\">\n              <a (click)=\"resendOtp()\">Resend OTP</a>\n            </div>\n\n          </form>\n        </div>\n\n\n      </div>\n\n    </div>\n  </div>\n\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OtpComponent } from './otp.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst route:Routes = [\n  {\n    path:'',\n    component: OtpComponent\n  }\n]\n\n@NgModule({\n  declarations: [OtpComponent],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(route)\n  ]\n})\nexport class OtpModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { AuthService } from '../services/auth.service';\nimport { decryption, encryption } from 'src/app/encryption';\nimport { Title } from '@angular/platform-browser';\n\n\n@Component({\n  selector: 'app-otp',\n  templateUrl: './otp.component.html',\n  styleUrls: ['./otp.component.scss']\n})\nexport class OtpComponent implements OnInit {\n\n  email: any;\n  otpForm: FormGroup;\n\n  constructor( private fb: FormBuilder, private authservice: AuthService, private router: Router,\n    private route: ActivatedRoute, private toastr: ToastrService, private _titleservice: Title ) {\n    this._titleservice.setTitle('Enter OTP');\n    this.otpForm = this.fb.group({\n      otp0: ['', [Validators.required]],\n      otp1: ['', [Validators.required]],\n      otp2: ['', [Validators.required]],\n      otp3: ['', [Validators.required]],\n    });\n  }\n\n  ngOnInit(): void {\n    this.email = decryption(this.route.snapshot.paramMap.get('email'));\n  }\n\n  otpFormSubmit() {\n    let data = {\n      \"email\": this.email,\n      \"otp\":  this.otpForm.value.otp0 + this.otpForm.value.otp1 + this.otpForm.value.otp2 + this.otpForm.value.otp3\n    };\n\n    this.authservice.otpVerify(data).subscribe((res: any) => {\n      this.toastr.success(res.message, '', { timeOut: 4000 });\n      this.router.navigate(['/auth/reset-password', encryption(this.email)]);\n    },\n      (err: any) => {\n        this.toastr.error(err.error.detail, '', { timeOut: 4000 });\n      })\n  }\n\n  resendOtp() {\n    this.authservice.forgotPassword({ \"email\": this.email }).subscribe((res: any) => {\n      this.toastr.success(res.message, '', { timeOut: 4000 });\n\n    },\n      (err: any) => {\n        this.toastr.error(err.error.detail, '', { timeOut: 4000 });\n      })\n  }\n  moveToNext(event: any, previousElement: any, nextElement: any) {\n    if (event.code !== 'Backspace' && event.code !== 'CapsLock' && event.code !== 'ShiftLeft' && event.code !== 'ControlLeft' && event.code !== 'Delete' && nextElement !== null)\n      nextElement.focus();\n\n    if (event.code === 'Backspace' && previousElement !== null)\n      previousElement.focus();\n  }\n}"],"x_google_ignoreList":[]}