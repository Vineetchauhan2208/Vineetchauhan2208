{"version":3,"file":"771.95ff05757d3a3305.js","mappings":"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","names":["i0","CreateTemplateComponent","constructor","fb","_titleservice","router","toastr","_tempcategoryservice","_templateservice","this","category","key","id","personalize","name","value","setTitle","templateForm","group","subject","Validators","body","ngOnInit","patchValue","getPersonalize","controls","setValue","categoryList","forEach","element","personalizeList","appendValue","ckeditor","instance","insertText","target","templateFormSubmit","createTemplate","template_type","subscribe","res","success","message","timeOut","reset","navigate","err","error","detail","static","core","selectors","ctx","EditTemplateComponent","_Activatedroute","template_id","snapshot","paramMap","get","getTemplateById","updateTemplate","routes","path","component","TemplateComponent","children","TemplateListComponent","_permissions","permissions","getPermissions","retrieveTemplate","getTemplate","template","getRequestParams","params","searchTitle","page","pageSize","search","page_size","field","order","param","sortField","sortOrder","order_in","title","templates","data","results","showError","length","totalTemplate","count","handlePageChange","event","onKeyUp","x","deleteTemplate","document","getElementById","click","$event","TemplateRoutingModule","RouterModule","TemplateModule","CommonModule","CKEditorModule","FormsModule","ReactiveFormsModule","NgxPaginationModule","SharedComponentsModule","TitleCasePipe","imports","SharedPipeModule","SortButtonComponent","EventEmitter"],"sourceRoot":"webpack:///","sources":["./src/app/admin/template/create-template/create-template.component.html","./src/app/admin/template/create-template/create-template.component.ts","./src/app/admin/template/edit-template/edit-template.component.html","./src/app/admin/template/edit-template/edit-template.component.ts","./src/app/admin/template/template-list/template-list.component.html","./src/app/admin/template/template-routing.module.ts","./src/app/admin/template/template.component.ts","./src/app/admin/template/template.component.html","./src/app/admin/template/template-list/template-list.component.ts","./src/app/admin/template/template.module.ts","./src/app/shared-components/shared-components.module.ts","./src/app/shared-components/sort-button/sort-button.component.ts","./src/app/shared-components/sort-button/sort-button.component.html"],"sourcesContent":["<section class=\"user-list\">\n    <ul class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\"><a routerLink=\"/admin\">Home</a></li>\n        <li class=\"breadcrumb-item\"><a routerLink=\"/admin/template\" >Template</a></li>\n        <li class=\"breadcrumb-item\"><a>Create Template</a></li>\n    </ul>\n\n    <div class=\"ulist-div\">\n        <form [formGroup]=\"templateForm\" (ngSubmit)=\"templateFormSubmit()\">\n            <div class=\"u-add\">\n                <div class=\"u-add-right\">\n                    <div>\n                        <label>Subject</label>\n                        <input type=\"text\" formControlName=\"subject\" class=\"form-control\" \n                        [class.is-invalid]=\"templateForm.controls['subject'].invalid && templateForm.controls['subject'].touched\"\n                        placeholder=\"Enter Subject\" />\n                        <small class=\"text-danger mt-4\" *ngIf=\"templateForm.controls['subject'].dirty && templateForm.controls['subject'].hasError('required')\">\n                            Please enter subject.\n                        </small>\n                    </div>\n                    <div>\n                        <label>Catgeory</label>\n                        <select class=\"form-select\" formControlName=\"category\" (change)=\"getPersonalize()\"\n                        [class.is-invalid]=\"templateForm.controls['category'].invalid && templateForm.controls['category'].touched\"\n                        >\n                            <option value=\"\" disabled='true'> Select Catgeory</option>\n                            <option *ngFor=\"let cat of categoryList\" value=\"{{cat.id}}\"> {{cat.category}} </option>\n                        </select>\n                        <small class=\"text-danger mt-4\" *ngIf=\"templateForm.controls['category'].dirty && templateForm.controls['category'].hasError('required')\">\n                            Please select category.\n                        </small>\n                    </div>\n\n                   \n                    <div>\n                        <label>Personalize</label>\n                        <select class=\"form-select\" (change)=\"appendValue($event)\" >\n                            <option *ngFor=\"let personalize of personalizeList\" value=\"{{personalize?.value}}\"> {{personalize?.name}} </option>\n                        </select>\n                        <small class=\"text-danger mt-4\" *ngIf=\"templateForm.controls['category'].dirty && templateForm.controls['category'].hasError('required')\">\n                            Please select category.\n                        </small>\n                    </div>\n                </div>\n\n            </div>\n\n            <ckeditor #ckeditor formControlName=\"body\" \n            [class.is-invalid]=\"templateForm.controls['body'].invalid && templateForm.controls['body'].touched\"\n            ></ckeditor>\n            <small class=\"text-danger mt-4\" *ngIf=\"templateForm.controls['body'].dirty && templateForm.controls['body'].hasError('required')\">\n                Please enter body.\n            </small>\n\n            <div class=\"saveBtn\">\n                <button type=\"submit\" [disabled]=\"templateForm.invalid\">Save</button>\n            </div>\n        </form>\n    </div>\n</section>","import { Component, ViewChild, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Title } from '@angular/platform-browser';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { TemplateCategoryService } from '../../services/template-category.service';\nimport { TemplateService } from '../../services/template.service';\n\n@Component({\n  selector: 'app-create-template',\n  templateUrl: './create-template.component.html',\n  styleUrls: ['./create-template.component.scss']\n})\nexport class CreateTemplateComponent implements OnInit {\n\n  @ViewChild('ckeditor') public ckeditor: any;\n\n  templateForm: FormGroup;\n  personalizeList: any;\n  categoryList: any = [\n    {\n      \"category\": \"Log Report\",\n      \"key\": \"log_report\",\n      \"id\": 1,\n      \"personalize\": [\n        { name: 'Module', value: 'module' },\n        { name: 'Name', value: 'name' },\n        { name: 'Email', value: 'email' },\n        { name: 'Ip', value: 'ip' },\n        { name: 'Timestamp', value: 'timestamp' }\n      ]\n    },\n    {\n      \"category\": \"Ticket\",\n      \"key\": \"ticket\",\n      \"id\": 2,\n      // \"personalize\": [\n      //   { name: 'Ticket Ids', value: 'ticket_ids' },\n      //   { name: 'Created At', value: 'created_at' },\n      //   { name: 'Updated At', value: 'updated_at' },\n      //   { name: 'Status', value: 'status' },\n      //   { name: 'Ticket Url', value: 'ticket_url' }\n      // ]\n      \"personalize\": [\n        // { name: 'Ticket Ids', value: 'ticket_ids' },\n        { name: 'Created At', value: 'created_at' },\n        { name: 'Updated At', value: 'updated_at' },\n        { name: 'Status', value: 'status' },\n        { name: 'Ticket Url', value: 'ticket_url' },\n        { name: 'Ticket Id', value: 'ticket_id' },\n        { name: 'Ticket Status', value: 'ticket_status' },\n        { name: 'Ticket Subject', value: 'ticket_subject' },\n        { name: 'Ticket Customer Name', value: 'ticket_customer_name' },\n        { name: 'Customer Name', value: 'customer_name' },\n      ]\n    }\n  ]\n\n  constructor(\n    private fb: FormBuilder,\n    private _titleservice: Title,\n    private router: Router,\n    private toastr: ToastrService,\n    private _tempcategoryservice: TemplateCategoryService,\n    private _templateservice: TemplateService\n  ) {\n\n    this._titleservice.setTitle('Create Template');\n    this.templateForm = this.fb.group({\n      subject: ['', [Validators.required]],\n      category: ['', [Validators.required]],\n      body: ['', [Validators.required]],\n    });\n  }\n\n  ngOnInit(): void {\n    let body = \"Hi this is ...\";\n    this.templateForm.patchValue({ 'body': body });\n\n  }\n\n  getPersonalize() {\n    this.templateForm.controls['body'].setValue('');\n    this.categoryList.forEach((element: any) => {\n      if (element.id == this.templateForm.controls['category'].value)\n        this.personalizeList = element.personalize;\n    });\n  }\n\n  appendValue(value: any) {\n    this.ckeditor.instance.insertText(`{{${value.target.value}}}`);\n  }\n\n\n  templateFormSubmit() {\n    let data = {\n      'body': this.templateForm.value.body,\n      'template_type': this.templateForm.value.category,\n      'subject': this.templateForm.value.subject\n    };\n    this._templateservice.createTemplate(data).subscribe((res: any) => {\n      this.toastr.success(res.message, '', { timeOut: 4000 });\n      this.templateForm.reset();\n      this.router.navigate(['admin/template']);\n    },\n      (err: any) => {\n        this.toastr.error(err.error.detail, '', { timeOut: 4000 });\n      })\n  }\n\n}\n","<section class=\"user-list\">\n    <ul class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\"><a routerLink=\"/admin\">Home</a></li>\n        <li class=\"breadcrumb-item\"><a routerLink=\"/admin/template\">Template</a></li>\n        <li class=\"breadcrumb-item\"><a href=\"javascript:void()\" routerLinkActive=\"active\">Update Template</a></li>\n    </ul>\n\n    <div class=\"ulist-div\">\n        <form [formGroup]=\"templateForm\">\n            <div class=\"u-add\">\n\n                <div class=\"u-add-right\">\n                    <div>\n                        <label>Subject</label>\n                        <input type=\"text\" formControlName=\"subject\" class=\"form-control\"\n                            [class.is-invalid]=\"templateForm.controls['subject'].invalid && templateForm.controls['subject'].touched\"\n                            placeholder=\"Enter Subject\" />\n                        <small class=\"text-danger mt-4\"\n                            *ngIf=\"templateForm.controls['subject'].dirty && templateForm.controls['subject'].hasError('required')\">\n                            Please enter subject.\n                        </small>\n                    </div>\n                    <div>\n                        <label>Catgeory</label>\n                        <select class=\"form-select\" formControlName=\"template_type\" (change)=\"getPersonalize()\"\n                            [class.is-invalid]=\"templateForm.controls['template_type'].invalid && templateForm.controls['template_type'].touched\">\n                            <option value=\"\" disabled='true'> Select Catgeory</option>\n                            <option *ngFor=\"let cat of categoryList\" value=\"{{cat.id}}\"> {{cat.category}} </option>\n                        </select>\n                        <small class=\"text-danger mt-4\"\n                            *ngIf=\"templateForm.controls['template_type'].dirty && templateForm.controls['template_type'].hasError('required')\">\n                            Please select category.\n                        </small>\n                    </div>\n\n\n                    <div>\n                        <label>Personalize</label>\n                        <select class=\"form-select\" (change)=\"appendValue($event)\">\n                            <option *ngFor=\"let personalize of personalizeList\" value=\"{{personalize?.value}}\">\n                                {{personalize?.name}} </option>\n                        </select>\n                        <small class=\"text-danger mt-4\"\n                            *ngIf=\"templateForm.controls['template_type'].dirty && templateForm.controls['template_type'].hasError('required')\">\n                            Please select category.\n                        </small>\n                    </div>\n                </div>\n\n            </div>\n\n            <ckeditor #ckeditor formControlName=\"body\"\n                [class.is-invalid]=\"templateForm.controls['body'].invalid && templateForm.controls['body'].touched\">\n            </ckeditor>\n            <p class=\"text-danger float-left mt-4\" \n                *ngIf=\"templateForm.controls['body'].dirty && templateForm.controls['body'].hasError('required')\">\n                Please enter body.\n            </p>\n\n            <div class=\"saveBtn\">\n                <button routerLink=\"/admin/template\">Cancel</button>\n                <button type=\"submit\" [disabled]=\"templateForm.invalid\" (click)=\"templateFormSubmit()\">Update</button>\n            </div>\n        </form>\n    </div>\n</section>","import { Component, ViewChild , OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ToastrService } from 'ngx-toastr';\nimport { TemplateService } from '../../services/template.service';\nimport { Title } from '@angular/platform-browser';\nimport { TemplateCategoryService } from '../../services/template-category.service';\n\n@Component({\n  selector: 'app-edit-template',\n  templateUrl: './edit-template.component.html',\n  styleUrls: ['./edit-template.component.scss']\n})\nexport class EditTemplateComponent implements OnInit {\n \n  @ViewChild('ckeditor') public ckeditor: any;\n\n  templateForm: FormGroup;\n  personalizeList: any;\n  categoryList: any = [\n    {\n      \"category\": \"Log Report\",\n      \"key\": \"log_report\",\n      \"id\": 1,\n      \"personalize\": [\n        { name: 'Module', value: 'module' },\n        { name: 'Name', value: 'name' },\n        { name: 'Email', value: 'email' },\n        { name: 'Ip', value: 'ip' },\n        { name: 'Timestamp', value: 'timestamp' }\n      ]\n    },\n    {\n      \"category\": \"Ticket\",\n      \"key\": \"ticket\",\n      \"id\": 2,\n      \"personalize\": [\n        // { name: 'Ticket Ids', value: 'ticket_ids' },\n        { name: 'Created At', value: 'created_at' },\n        { name: 'Updated At', value: 'updated_at' },\n        { name: 'Status', value: 'status' },\n        { name: 'Ticket Url', value: 'ticket_url' },\n        { name: 'Ticket Id', value: 'ticket_id' },\n        { name: 'Ticket Status', value: 'ticket_status' },\n        { name: 'Ticket Subject', value: 'ticket_subject' },\n        { name: 'Ticket Customer Name', value: 'ticket_customer_name' },\n        { name: 'Customer Name', value: 'customer_name' },\n      ]\n    }\n  ]\n\n  tempCategory:any = [];\n\n  template_id:any;\n \n\n  constructor(\n    private fb:FormBuilder,\n    private _Activatedroute:ActivatedRoute,\n    private toastr: ToastrService,\n    private _templateservice:TemplateService,\n    private _tempcategoryservice:TemplateCategoryService,\n    private router:Router,\n    private _titleservice:Title,\n  )\n  {\n\n    this._titleservice.setTitle('Update Template');\n\n    this.template_id=this._Activatedroute.snapshot.paramMap.get(\"id\");\n\n    this.templateForm = this.fb.group({\n      subject: ['', [Validators.required]],\n      template_type: ['', [Validators.required]],\n      body: ['', [Validators.required]],\n    });\n\n  }\n\n  ngOnInit(): void {\n\n    this.getTemplateById();\n    \n    \n  }\n\n\n  getPersonalize()\n  { \n    if(this.templateForm.value.template_type == this.template_type)\n    {\n      this.getTemplateById();\n    }\n      this.templateForm.controls['body'].setValue('');\n      this.categoryList.forEach((element:any) => {\n        if(element.id == this.templateForm.controls['template_type'].value)\n          this.personalizeList = element.personalize;\n      }); \n  }\n\n  appendValue(value:any)\n  {\n    this.ckeditor.instance.insertText(`{{${value.target.value}}}`);\n  }\n\n\n  templateFormSubmit() {\n    let data = {\n                'body':this.templateForm.value.body,\n                'template_type':this.templateForm.value.template_type,\n                'subject': this.templateForm.value.subject\n               };\n      this._templateservice.updateTemplate(data,this.template_id).subscribe((res: any) => {\n        this.toastr.success(res.message, '', { timeOut: 4000 });\n        this.router.navigate(['admin/template']);\n      },\n        (err: any) => {\n          this.toastr.error(err.error.detail, '', { timeOut: 4000 });\n        })\n  }\n\n\n  template_type:any;\n  getTemplateById()\n  {\n    this._templateservice.getTemplateById(this.template_id).subscribe((res:any)=>{\n      this.templateForm.patchValue(\n                                    {\n                                      \"subject\":res.subject,\n                                      \"template_type\":res.template_type,\n                                      \"body\"    :res.body\n                                    }\n                                  );\n              \n              if(typeof(this.template_type) == 'undefined')\n              {\n                this.getPersonalize();\n              }\n              \n              this.template_type = res.template_type;\n      \n    },\n    (err:any)=>{\n    })\n\n  }\n\n\n}\n","<section class=\"user-list\">\n  <ul class=\"breadcrumb\">\n    <li class=\"breadcrumb-item\"><a routerLink=\"/admin\">Home</a></li>\n    <li class=\"breadcrumb-item\"><a c routerLinkActive=\"active\">Template</a></li>\n  </ul>\n  <div class=\"ulist-div\">\n    <div class=\"u-add\">\n      <h2>Template</h2>\n      <div class=\"u-add-right\">\n        <div>\n          <!-- <input type=\"text\" #yourInput (keyup)=\"onKeyUp(yourInput.value)\" placeholder=\"Search by id or category\" /> -->\n        </div>\n        <div>\n          <!-- <select (change)=\"currentCategory($event)\">\n            <option value=\"\"> Filter by Catgeory</option>\n            <option *ngFor=\"let cat of tempCategory\" value=\"{{cat.id}}\"> {{cat.category}} </option>\n          </select> -->\n        </div>\n        <div>\n          <a *ngIf=\"permissions.template == 'Full access'\" routerLink=\"/admin/template/create\"><img\n              src=\"assets/images/icon/addIcon.png\" alt=\"create\" />Create</a>\n        </div>\n      </div>\n    </div>\n    <hr />\n    <div class=\"responsive-tbl\">\n      <table>\n        <thead>\n          <th>\n            <div class=\"d-flex align-items-center justify-content-center\">\n              <p class=\"mb-0\">Template ID</p>\n              <sort-button (onSort)=\"retrieveTemplate('ids',$event)\"></sort-button>\n            </div>\n          </th>\n          <th>\n            <div class=\"d-flex align-items-center justify-content-center\">\n              <p class=\"mb-0\">Category</p>\n              <sort-button (onSort)=\"retrieveTemplate('template_type',$event)\"></sort-button>\n            </div>\n          </th>\n          <th>\n            <div class=\"d-flex align-items-center justify-content-center\">\n              <p class=\"mb-0\">Subject</p>\n              <sort-button (onSort)=\"retrieveTemplate('subject',$event)\"></sort-button>\n            </div>\n          </th>\n          <th *ngIf=\"permissions.template == 'Full access'\">Action </th>\n        </thead>\n        <tr\n          *ngFor=\"let template of templates | paginate : {itemsPerPage: pageSize,currentPage: page,totalItems: totalTemplate};let i = index\">\n          <td> {{template.ids || ''}} </td>\n          <td> {{template.template_type_display || ''}} </td>\n          <td> {{template.subject || ''}} </td>\n          <td *ngIf=\"permissions.template == 'Full access'\">\n            <div class=\"actiontd\">\n              <a class=\"edit\"\n                [routerLink]=\"['/admin/template/edit/', template.id]\"><i class=\"fa fa-edit\" title=\"Edit\"></i></a>\n              <a class=\"eyeIcon delIcon\"\n                (click)=\"getTemplate(template)\"><i class=\"fa fa-trash-o\" title=\"Delete\" data-bs-toggle=\"modal\"\n                  data-bs-target=\"#delTemplateModal\"></i></a>\n            </div>\n          </td>\n        </tr>\n      </table>\n      <p class=\"text-danger\" *ngIf=\"showError\">Records not found</p>\n\n    </div>\n    <pagination-controls *ngIf=\"templates.length !=0\" class=\"pagination-crl\" previousLabel=\"Prev\" nextLabel=\"Next\"\n      (pageChange)=\"handlePageChange($event)\"></pagination-controls>\n  </div>\n</section>\n<!-- The Modal -->\n<div class=\"modal\" id=\"delTemplateModal\">\n  <div class=\"modal-dialog\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h4 class=\"modal-title\">Are you sure you want to delete this template?</h4>\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n      </div>\n      <div class=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-danger\" id=\"closedeletemodal\" data-bs-dismiss=\"modal\">Cancel</button>\n        <button type=\"button\" class=\"btn delbtn\" (click)=\"deleteTemplate()\">Delete</button>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, createComponent, NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CreateTemplateComponent } from './create-template/create-template.component';\nimport { EditTemplateComponent } from './edit-template/edit-template.component';\nimport { TemplateListComponent } from './template-list/template-list.component';\nimport { TemplateComponent } from './template.component';\n\nconst routes: Routes = [\n  { path: '', component: TemplateComponent, children:[\n    {path:'', component: TemplateListComponent},\n    {path:'create',component:CreateTemplateComponent},\n    {path:'edit/:id',component:EditTemplateComponent}\n\n  ] }\n \n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class TemplateRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-template',\n  templateUrl: './template.component.html',\n  styleUrls: ['./template.component.scss']\n})\nexport class TemplateComponent implements OnInit {\n  \n  constructor(\n    private _titleservice:Title\n  )\n  {\n    this._titleservice.setTitle('Templates');\n  }\n\n  ngOnInit(): void {\n    \n  }\n\n\n}\n","<router-outlet></router-outlet>","import { Component, OnInit } from '@angular/core';\nimport { ToastrService } from 'ngx-toastr';\nimport { TemplateCategoryService } from '../../services/template-category.service';\nimport { TemplateService } from '../../services/template.service';\nimport { PermissionsService } from '../../services/permissions.service';\n\n@Component({\n  selector: 'app-template-list',\n  templateUrl: './template-list.component.html',\n  styleUrls: ['./template-list.component.scss']\n})\nexport class TemplateListComponent implements OnInit {\n\n  tempCategory: any = [\n    {\n      \"category\": \"Log Report\",\n      \"key\": \"log_report\",\n      \"id\": '1',\n    },\n    {\n      \"category\": \"Ticket\",\n      \"key\": \"ticket\",\n      \"id\": '2',\n    }\n  ]\n  template_id: any;\n  showError: boolean = false;\n  templates: any = [];\n  page = 1;\n  pageSize = 10;\n  title = '';\n  category = '';\n  totalTemplate: any;\n  permissions: any;\n  sortField: any;\n  sortOrder: any;\n  constructor(private toastr: ToastrService, private _templateservice: TemplateService,\n    private _tempcategoryservice: TemplateCategoryService, private _permissions: PermissionsService) {\n    this.permissions = this._permissions.getPermissions();\n     }\n\n  ngOnInit(): void {\n    this.retrieveTemplate();\n    // this.getAllTempCategory();\n  }\n\n  getTemplate(template: any) {\n    this.template_id = template.id;\n  }\n\n  getRequestParams(params:any,searchTitle: string, page: number, pageSize: number, category: any): any {\n    if (searchTitle) {\n      params[`search`] = searchTitle;\n    }\n    if (page) {\n      params[`page`] = page;\n    }\n    if (pageSize) {\n      params[`page_size`] = pageSize;\n    }\n    if (pageSize) {\n      params[`name`] = category\n    }\n    return params;\n  }\n\n  retrieveTemplate(field?: any, order?: any): void {\n    let param: any = {};\n\n    if(field) {\n      this.sortField = field;\n      this.sortOrder = order;\n    }\n    if (this.sortField) {\n      param['field'] = this.sortField;\n      param['order_in']= this.sortOrder;\n    }\n    this.getRequestParams(param, this.title, this.page, this.pageSize, this.category);\n\n    this._templateservice.getTemplate(param).subscribe((res: any) => {\n      this.templates = res.data.results;\n      this.showError = this.templates.length == 0 ? true : false;\n      this.totalTemplate = res.data.count;\n\n    },\n      (err: any) => {\n        this.toastr.error(err.error.detail, '', { timeOut: 4000 });\n      })\n\n  }\n\n  handlePageChange(event: number): void {\n    this.page = event;\n    this.retrieveTemplate();\n  }\n\n  onKeyUp(x: any) {\n    this.title = x;\n    this.page = 1;\n    this.retrieveTemplate();\n  }\n\n  // currentCategory(event: any) {\n  //   this.category = event.target.value.toString();\n  //   this.page = 1;\n  //   this.retrieveTemplate();\n  // }\n\n  deleteTemplate() {\n    this._templateservice.deleteTemplate(this.template_id).subscribe((res: any) => {\n      this.toastr.success(res.message, '', { timeOut: 4000 });\n      this.retrieveTemplate();\n      document.getElementById('closedeletemodal')?.click();\n    });\n  }\n\n  // getAllTempCategory() {\n  //   this._tempcategoryservice.getAllTempCategory().subscribe((res: any) => {\n  //     this.tempCategory = res.data.results;\n  //   },\n  //     (err: any) => {\n  //     })\n  // }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TemplateRoutingModule } from './template-routing.module';\nimport { FormsModule , ReactiveFormsModule } from '@angular/forms';\nimport { TemplateComponent } from './template.component';\nimport { CreateTemplateComponent } from './create-template/create-template.component';\nimport { EditTemplateComponent } from './edit-template/edit-template.component';\nimport { CKEditorModule } from 'ckeditor4-angular';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { TemplateListComponent } from './template-list/template-list.component';\nimport { SharedComponentsModule } from \"../../shared-components/shared-components.module\";\n\n@NgModule({\n  declarations: [\n    TemplateComponent,\n    CreateTemplateComponent,\n    EditTemplateComponent,\n    TemplateListComponent\n  ],\n  imports: [\n    CommonModule,\n    TemplateRoutingModule,\n    CKEditorModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NgxPaginationModule,\n    SharedComponentsModule\n]\n})\nexport class TemplateModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule, TitleCasePipe } from '@angular/common';\nimport { SortButtonComponent } from './sort-button/sort-button.component';\nimport { SmartSearchComponent } from './smart-search/smart-search.component';\nimport { LoaderComponent } from './loader/loader.component';\nimport { TimelineComponent } from './timeline/timeline.component';\nimport { SharedPipeModule } from '../pipe/shared-pipe.module';\nimport { FormsModule } from '@angular/forms';\nimport { ButtonComponent } from './button/button.component';\nimport { VehicleDetailsComponent } from './vehicle-details/vehicle-details.component';\n\n\n@NgModule({\n  declarations: [SortButtonComponent, SmartSearchComponent, LoaderComponent, TimelineComponent, VehicleDetailsComponent, ButtonComponent],\n  imports: [\n    CommonModule,\n    SharedPipeModule,\n    CommonModule,\n    FormsModule,\n  ],\n  exports:[SortButtonComponent, SmartSearchComponent, LoaderComponent, TimelineComponent, VehicleDetailsComponent, ButtonComponent],\n  providers:[TitleCasePipe]\n})\nexport class SharedComponentsModule { }\n","import { Component, EventEmitter, Output } from '@angular/core';\n\n@Component({\n  selector: 'sort-button',\n  templateUrl: './sort-button.component.html',\n  styleUrls: ['./sort-button.component.scss']\n})\nexport class SortButtonComponent {\n@Output() onSort = new EventEmitter<string>();\n\n\n}\n","<div class=\"d-flex flex-column\" style=\"margin-left: 10px;\">\n    <i class=\"fa fa-chevron-up pointer\" (click)=\"onSort.emit('desc')\"\n        aria-hidden=\"true\"></i>\n    <i class=\"fa fa-chevron-down pointer\"\n        (click)=\"onSort.emit('asc')\" aria-hidden=\"true\"></i>\n</div>"],"x_google_ignoreList":[]}