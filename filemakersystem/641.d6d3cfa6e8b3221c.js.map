{"version":3,"file":"641.d6d3cfa6e8b3221c.js","mappings":"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","names":["ManageDashboardComponent","static","selectors","i0","DashboardPermissionListComponent","constructor","toastr","_titleservice","_permissionservice","crud","this","setTitle","permissions","getPermissions","ngOnInit","retrieveRolePermission","getRequest","requestUrl","then","res","rolepermissions","data","success","message","forEach","element","role_name","dashboard_json","ele","dashBoardPermission","short_code","is_show","localStorage","setItem","JSON","stringify","core","i_r4","i_r2","routes","path","component","children","CreateDashboardPermissionComponent","fb","_rolepermissionservice","router","_permissionArrService","permissionArr","dashboardPermissionArr","permissionForm","group","name","Validators","roleList","results","permissionFormSubmit","value","postRequest","navigate","error","changePermission","event","key","chart_name","resetPermissionForm","ctx","UpdateDashboardPermissionComponent","route","permission_id","snapshot","paramMap","get","updatePermissions","putRequest","ManageDashboardRoutingModule","RouterModule","ManageDashboardModule","CommonModule","FormsModule","ReactiveFormsModule","NgxPaginationModule"],"sourceRoot":"webpack:///","sources":["./src/app/admin/manage-dashboard/manage-dashboard.component.ts","./src/app/admin/manage-dashboard/manage-dashboard.component.html","./src/app/admin/manage-dashboard/dashboard-permission-list/dashboard-permission-list.component.html","./src/app/admin/manage-dashboard/dashboard-permission-list/dashboard-permission-list.component.ts","./src/app/admin/manage-dashboard/create-dashboard-permission/create-dashboard-permission.component.html","./src/app/admin/manage-dashboard/update-dashboard-permission/update-dashboard-permission.component.html","./src/app/admin/manage-dashboard/manage-dashboard-routing.module.ts","./src/app/admin/manage-dashboard/create-dashboard-permission/create-dashboard-permission.component.ts","./src/app/admin/manage-dashboard/update-dashboard-permission/update-dashboard-permission.component.ts","./src/app/admin/manage-dashboard/manage-dashboard.module.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-manage-dashboard',\n  templateUrl: './manage-dashboard.component.html',\n  styleUrls: ['./manage-dashboard.component.scss']\n})\nexport class ManageDashboardComponent {\n\n}\n","<router-outlet></router-outlet>","<div class=\"permissions\">\n    <ul class=\"breadcrumb\">\n      <li class=\"breadcrumb-item\"><a routerLink=\"/admin\">Home</a></li>\n      <li class=\"breadcrumb-item\"><a routerLink=\"/admin/Permission\" routerLinkActive=\"active\"> Manage Permission</a></li>\n    </ul>\n    <div class=\"permission-inner\">\n      <div class=\"permission-head\">\n        <h2>Manage Dashboard</h2>\n        <a *ngIf=\"permissions.permission == 'Full access'\" routerLink=\"/admin/manage-dashboard/create\"\n          class=\"btn btn-primary btn-sm\">\n          <img src=\"assets/images/icon/addIcon.png\" style=\"width:20px;\" alt=\"create permission\" />Create Permission\n        </a>\n      </div>\n      <hr />\n      <div class=\"accordion\" id=\"accordionContainer\">\n        <div class=\"accordion\" id=\"accordionContainer\">\n          <div class=\"accordion-item\"\n            *ngFor=\"let roleperm of rolepermissions; let i = index\">\n            <h2 class=\"accordion-header\" [id]=\"'heading' + i\" style=\"position:relative;\">\n              <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\"\n                [attr.data-bs-target]=\"'#collapse' + i\" aria-expanded=\"true\" [attr.aria-controls]=\"'collapse' + i\">\n                {{roleperm.role_name.replace('_',\" \") | titlecase}}\n                <div class=\"edit\">\n                  <a *ngIf=\"permissions.permission == 'Full access'\"\n                    [routerLink]=\"['/admin/manage-dashboard/update', roleperm.role_name]\">\n                    <i class=\"fa fa-edit\" title=\"Edit\"></i>\n                  </a>\n                  <!-- <a>\n                    <i class=\"fa fa-trash-o\" title=\"Delete\" data-bs-toggle=\"modal\" data-bs-target=\"#delTemplateModal\"></i>\n                  </a> -->\n                </div>\n              </button>\n              <div [id]=\"'collapse' + i\" class=\"accordion-collapse collapse {{i==0 ? 'show' : ''}} \"\n                [attr.aria-labelledby]=\"'heading' + i\" data-bs-parent=\"#accordionContainer\">\n                <div class=\"accounting-childrens commontodiv accordion_body\">\n                  <div class=\"dashboard-holders\" *ngFor=\"let permissions of roleperm.dashboard_json\">\n                    <div class=\"dashboard \">\n                      <p> {{permissions.chart_name.replace('_', ' ') | titlecase}}</p>\n                    </div>\n                    <div class=\"dashboard-permissions\">\n                      <div class=\"form-check\">\n                        <input type=\"radio\" class=\"form-check-input\"\n                          [checked]=\"permissions?.is_show\" disabled >View\n                        <!-- <label class=\"form-check-label\" for=\"radio1\"></label> -->\n                      </div>\n                      <div class=\"form-check\">\n                        <input type=\"radio\" class=\"form-check-input\"\n                          [checked]=\"!permissions?.is_show\" disabled >Hide\n                        <!-- <label class=\"form-check-label\" for=\"radio1\"></label> -->\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </h2>\n          </div>\n          <!-- <pagination-controls class=\"pagination-crl\" previousLabel=\"Prev\" nextLabel=\"Next\"\n            (pageChange)=\"handlePageChange($event)\"></pagination-controls> -->\n        </div>\n      </div>\n    </div>\n  </div>\n  <!-- Delete modal start here -->\n  <!-- <div class=\"modal\" id=\"delTemplateModal\">\n    <div class=\"modal-dialog\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <h4 class=\"modal-title\">Are you sure you want to delete this template?</h4>\n          <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n        </div>\n        <div class=\"modal-footer\">\n          <button type=\"button\" class=\"btn btn-secondry\" id=\"closedeletemodal\" data-bs-dismiss=\"modal\">Cancel</button>\n          <button type=\"button\" class=\"btn btn-danger\" (click)=\"deletePermission()\">Delete</button>\n        </div>\n      </div>\n    </div>\n  </div> -->","import { Component } from '@angular/core';\nimport { ToastrService } from 'ngx-toastr';\nimport { PermissionsService } from '../../services/permissions.service';\nimport { RolepermissionService } from '../../services/rolepermission.service';\nimport { Title } from '@angular/platform-browser';\nimport { requestUrl } from 'src/app/services/adminReqUrl.const';\nimport { CrudService } from 'src/app/services/crud.service';\n\n@Component({\n  selector: 'app-dashboard-permission-list',\n  templateUrl: './dashboard-permission-list.component.html',\n  styleUrls: ['./dashboard-permission-list.component.scss']\n})\nexport class DashboardPermissionListComponent {\n  cateories: any[] = [\n    'Super Administrator',\n    'Technical Manager',\n    'Dealer Account Manager',\n    'Sales Admin'\n  ]\n  permissions: any;\n  rolepermissions: any = [];\n  params: any;\n  page = 1;\n  pageSize = 5;\n  title = '';\n  totalrolepermission: any;\n  dashBoardPermission: any = {};\n  constructor(private toastr: ToastrService, private _titleservice: Title,\n    private _permissionservice: PermissionsService, private crud: CrudService\n  ) {\n    this._titleservice.setTitle('Manage Dashboard')\n    this.permissions = this._permissionservice.getPermissions();\n  }\n\n  ngOnInit(): void {\n    this.retrieveRolePermission();\n  }\n\n  retrieveRolePermission(): void {\n    this.crud.getRequest(`${requestUrl.adminDashboardPermissionManage}`).then((res: any) => {\n      if (res) {\n        this.rolepermissions = res.data;\n        this.toastr.success(res.message);\n        this.rolepermissions.forEach((element: any) => {\n          if (element.role_name == 'Admin Management') {\n            element.dashboard_json.forEach((ele: any) => {\n              this.dashBoardPermission[ele.short_code] = ele.is_show;\n            });\n            localStorage.setItem('dashBoardPermissions', JSON.stringify(this.dashBoardPermission));\n          }\n        });\n      }\n    })\n  }\n}\n","<section class=\"add-user\">\n    <ul class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\"><a routerLink=\"/admin\">Home</a></li>\n\n        <li class=\"breadcrumb-item\"><a routerLink=\"/admin/permission\"> Permission Management</a></li>\n        <li class=\"breadcrumb-item\"><a routerLink=\"/admin/permission\" routerLinkActive=\"active\"> Create New\n                Permission</a></li>\n    </ul>\n\n    <div class=\"add-user-inner\">\n        <div class=\"d-flex justify-content-between align-items-center\">\n            <h2> Create New Dashboard Permission</h2>\n            <button class=\"backBtn\" routerLink=\"/admin/manage-dashboard\">\n                <i class=\"fa fa-long-arrow-left\" aria-hidden=\"true\"></i>\n            </button>\n        </div>\n        <div class=\"formFields\">\n            <form [formGroup]=\"permissionForm\" (ngSubmit)=\"permissionFormSubmit()\">\n                <div style=\"display: flex; flex-direction: column;\">\n                    <label for=\"first_name\" class=\"form-label\">Role Name</label>\n                    <!-- (change)=\"roleChange($event)\" -->\n                    <select formControlName=\"name\" class=\"form-select\">\n                        <option value=\"\" disabled> Select Role</option>\n                        <option value=\"{{role.name}}\" *ngFor=\"let role of roleList\"> {{role.name}} </option>>\n                    </select>\n                    <!-- <input type=\"text\" class=\"form-control\" formControlName=\"name\" placeholder=\"Role Name\"> -->\n                    <!-- <small class=\"text-danger mt-4\" *ngIf=\"permissionForm.controls['name'].touched &&  permissionForm.value.name == ''\">\n                        Please select role name.\n                    </small> -->\n                </div>\n\n                <div class=\"submitReset\">\n                    <table width=\"100%\">\n\n                        <tr *ngFor=\"let perm of permissionArr;let i = index\">\n                            <td> {{perm.chart_name.replace('_', ' ') | titlecase}} </td>\n                            <td>\n\n                                <input type=\"radio\" value=\"{{perm.is_show}}\" name=\"{{perm.chart_name}}\"\n                                    (click)=\"changePermission(true,i)\" [checked]=\"perm.is_show == true? true:false\">View\n                            </td>\n                            <td>\n\n                                <input type=\"radio\" value=\"{{perm.is_show}}\" name=\"{{perm.chart_name}}\"\n                                    (click)=\"changePermission(false,i)\"\n                                    [checked]=\"perm.is_show == false ? true: false\">Hide\n                            </td>\n                        </tr>\n\n\n                    </table>\n                </div>\n\n                <div class=\"submitReset\">\n\n                    <button type=\"button\" routerLink=\"/admin/manage-dashboard\" class=\"ressetBtn\">Cancel</button>\n                    <button type=\"button\" (click)=\"resetPermissionForm()\" class=\"ressetBtn\">Reset</button>\n                    <button type=\"submit\">Submit</button>\n                    <!-- [disabled]=\"permissionForm.invalid\" -->\n                </div>\n            </form>\n        </div>\n    </div>\n</section>","<section class=\"add-user\">\n    <ul class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\"><a routerLink=\"/admin\">Home</a></li>\n\n        <li class=\"breadcrumb-item\"><a routerLink=\"/admin/permission\"> Permission Management</a></li>\n        <li class=\"breadcrumb-item\"><a routerLink=\"/admin/permission\" routerLinkActive=\"active\"> Update Permission</a>\n        </li>\n    </ul>\n\n    <div class=\"add-user-inner\">\n        <div class=\"d-flex justify-content-between align-items-center\">\n            <h2 style=\"margin-left: 10px;\"> Update Dashboard</h2>\n            <button class=\"backBtn\" routerLink=\"/admin/manage-dashboard\">\n                <i class=\"fa fa-long-arrow-left\" aria-hidden=\"true\"></i>\n            </button>\n        </div>\n        <div class=\"formFields\">\n            <form>\n                <div style=\"margin-left: 10px;\">\n                    <label>Role Name: &nbsp;</label>\n                    <span>{{permission_id}}</span>\n                    <!-- <input type=\"text\" class=\"form-control\" readonly [(ngModel)]=\"permission_id\" placeholder=\"Role Name\"> -->\n                </div>\n\n                <div class=\"submitReset\">\n                    <table width=\"100%\">\n\n                        <tr *ngFor=\"let perm of permissions;let i = index\">\n                            <td> {{perm?.chart_name.replace('_', ' ') | titlecase}} </td>\n                            <td>\n                                <input type=\"radio\" [name]=\"perm?.chart_name\" (click)=\"changePermission(true,i)\"\n                                    [checked]=\"perm?.is_show == true?true:false\">View\n                            </td>\n                            <td>\n                                <input type=\"radio\" [name]=\"perm?.chart_name\" (click)=\"changePermission(false,i)\"\n                                    [checked]=\"perm?.is_show == false?true:false\">Hide\n                            </td>\n                        </tr>\n\n\n                    </table>\n                </div>\n\n                <div class=\"submitReset\">\n                    <button type=\"button\" routerLink=\"/admin/manage-dashboard\" class=\"ressetBtn\">Cancel</button>\n                    <button type=\"button\" (click)=\"resetPermissionForm()\" class=\"ressetBtn\">Reset</button>\n                    <button type=\"submit\" (click)=\"updatePermissions()\">Update</button>\n                </div>\n            </form>\n        </div>\n    </div>\n</section>","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ManageDashboardComponent } from './manage-dashboard.component';\nimport { DashboardPermissionListComponent } from './dashboard-permission-list/dashboard-permission-list.component';\nimport { CreateDashboardPermissionComponent } from './create-dashboard-permission/create-dashboard-permission.component';\nimport { UpdateDashboardPermissionComponent } from './update-dashboard-permission/update-dashboard-permission.component';\n\nconst routes: Routes = [{\n  path: '', component: ManageDashboardComponent, children: [\n    { path: '', component: DashboardPermissionListComponent },\n    { path: 'create', component: CreateDashboardPermissionComponent },\n    { path: 'update/:id', component: UpdateDashboardPermissionComponent }\n  ]\n}];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ManageDashboardRoutingModule { }\n","import { Component } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { PermissionsArrService } from '../../services/permissions-arr.service';\nimport { RolepermissionService } from '../../services/rolepermission.service';\nimport { Title } from '@angular/platform-browser';\nimport { CrudService } from 'src/app/services/crud.service';\nimport { requestUrl } from 'src/app/services/adminReqUrl.const';\n\n@Component({\n  selector: 'app-create-dashboard-permission',\n  templateUrl: './create-dashboard-permission.component.html',\n  styleUrls: ['./create-dashboard-permission.component.scss']\n})\nexport class CreateDashboardPermissionComponent {\n\n  permissionForm: FormGroup;\n  changeRole: any = '';\n  permissionArr: any = [];\n  roleList: any;\n\n  constructor(\n    private fb: FormBuilder, private _titleservice: Title, private crud: CrudService,\n    private _rolepermissionservice: RolepermissionService, private toastr: ToastrService,\n    private router: Router, private _permissionArrService: PermissionsArrService) {\n    this._titleservice.setTitle('Create Permission');\n    this.permissionArr = this._permissionArrService.dashboardPermissionArr();\n    this.permissionForm = this.fb.group({\n      name: ['', Validators.required],\n    });\n  }\n\n  ngOnInit(): void {\n    this.crud.getRequest(`${requestUrl.getAdminRolesAndPermission}`).then((res: any) => {\n      if (res)\n        this.roleList = res.data.results;\n    });\n  }\n\n  permissionFormSubmit() {\n    if (this.permissionForm.value.name != '') {\n      let data1 = {\n        \"role_name\": this.permissionForm.value.name,\n        \"dashboard_json\": this.permissionArr\n      };\n      this.crud.postRequest(`${requestUrl.adminDashboardPermissionManage}`, data1).then((res: any) => {\n        if (res) {\n          if (res.success) {\n            this.toastr.success(res.message);\n            this.router.navigate(['admin/manage-dashboard']);\n          }\n          else {\n            this.toastr.error(res.message);\n          }\n        }\n      })\n    } else\n      this.toastr.error('Please select a role');\n  }\n\n  changePermission(event: any, key: any) {\n    let obj = {\n      'is_show': event,\n      'chart_name': this.permissionArr[key].chart_name,\n      'short_code': this.permissionArr[key].short_code\n    };\n\n    this.permissionArr[key] = obj\n  }\n\n  resetPermissionForm() {\n    this.permissionArr.forEach((element: any) => {\n      element['is_show'] = true;\n    });\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { PermissionsArrService } from '../../services/permissions-arr.service';\nimport { RolepermissionService } from '../../services/rolepermission.service';\nimport { Title } from '@angular/platform-browser';\nimport { CrudService } from 'src/app/services/crud.service';\nimport { requestUrl } from 'src/app/services/adminReqUrl.const';\n\n@Component({\n  selector: 'app-update-dashboard-permission',\n  templateUrl: './update-dashboard-permission.component.html',\n  styleUrls: ['./update-dashboard-permission.component.scss']\n})\nexport class UpdateDashboardPermissionComponent {\n\n  permissions: any;\n  permission_id: any;\n  role_name: any;\n  name:any;\n  constructor(private fb: FormBuilder, private _rolepermissionservice: RolepermissionService,\n    private toastr: ToastrService, private router: Router, public crud: CrudService,\n    private route: ActivatedRoute, private _titleservice: Title,\n    private _permissionArrService: PermissionsArrService) {\n    this._titleservice.setTitle('Update Dashboard Permission');\n    this.permission_id = this.route.snapshot.paramMap.get('id');\n    this.name = this.permission_id\n  }\n\n  ngOnInit(): void {\n    this.crud.getRequest(`${requestUrl.adminDashboardPermissionManage}?role_name=${this.permission_id}`).then((res: any) => {\n      if (res) {\n        this.permissions = res.data[0].dashboard_json;\n        this.toastr.success(res.message);\n      }\n    })\n    // this.crud.getRequest(`${requestUrl.adminDashboardPermissionManage}`).then((res: any) => {\n    //   if (res) {\n    //     const rolepermissions = res.data;\n    //     rolepermissions.forEach((element:any) => {\n    //       if(element.role_name == this.permission_id){\n    //         this.permissions = element?.dashboard_json\n    //       }\n    //     });\n    //     this.toastr.success(res.message);\n    //   }\n    // })\n    // this._rolepermissionservice.getRolePermissionId(this.permission_id).subscribe((res: any) => {\n    //   this.role_name = res.data.name;\n    //   this.permissions = res.data.permissions;\n    //   let arr2 = this._permissionArrService.permissionArr();\n    //   let merged = [];\n    //   for (let i = 0; i < arr2.length; i++) {\n    //     merged.push({\n    //       ...arr2[i],\n    //       ...(this.permissions.find((itmInner: any) => itmInner.permission === arr2[i].permission))\n    //     } );\n    //   }\n    //   this.permissions = merged;\n    //   this.permissionForm.patchValue({ 'name': this.role_name });\n    // },\n    //   (err: any) => {\n    //   })\n  }\n\n  changePermission(event: any, key: any) {\n    let obj = {\n      'is_show': event,\n      'chart_name': this.permissions[key].chart_name,\n      'short_code': this.permissions[key].short_code\n    };\n    this.permissions[key] = obj\n  }\n\n  updatePermissions() {\n    let data = {\n      \"dashboard_json\": this.permissions\n    };\n\n    this.crud.putRequest(`${requestUrl.adminDashboardPermissionManage}?role_name=${this.permission_id}`, data).then((res: any) => {\n      if (res) {\n        this.toastr.success(res.message);\n        this.router.navigate(['admin/manage-dashboard']);\n      }\n    })\n  }\n\n  resetPermissionForm() {\n    this.permissions.forEach((element: any) => {\n      element['is_show'] = true;\n    });\n\n    // this.permissionForm.patchValue({'name':this.role_name});\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ManageDashboardRoutingModule } from './manage-dashboard-routing.module';\nimport { ManageDashboardComponent } from './manage-dashboard.component';\nimport { DashboardPermissionListComponent } from './dashboard-permission-list/dashboard-permission-list.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { CreateDashboardPermissionComponent } from './create-dashboard-permission/create-dashboard-permission.component';\nimport { UpdateDashboardPermissionComponent } from './update-dashboard-permission/update-dashboard-permission.component';\n\n\n@NgModule({\n  declarations: [\n    ManageDashboardComponent,\n    DashboardPermissionListComponent,\n    CreateDashboardPermissionComponent,\n    UpdateDashboardPermissionComponent\n  ],\n  imports: [\n    CommonModule,\n    ManageDashboardRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NgxPaginationModule\n  ]\n})\nexport class ManageDashboardModule { }\n"],"x_google_ignoreList":[]}