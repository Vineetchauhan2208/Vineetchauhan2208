{"version":3,"file":"91.fefad84fd0979ae2.js","mappings":"oQAmBcA,oBAAsFA,kHAEtFA,+BACAA,oBAEEA,yCACFA,+BAUAA,oBACEA,+CACFA,+BACAA,oBAEEA,2CACFA,SCnCd,MAAMC,EAAe,CACnB,CACEC,KAAK,GACLC,UCI+B,MAA7B,MAAOC,EAMXC,YAAoBC,EAAyBC,EAAkCC,EACrEP,EAA+BQ,EAA+BC,GADpDC,UAAyBA,mBAAkCA,cACrEA,aAA+BA,cAA+BA,qBAHxEA,cAAgB,WAChBA,eAAiB,WAGfA,KAAKD,cAAcE,SAAS,kBAC5BD,KAAKE,kBAAoBF,KAAKL,GAAGQ,MAAM,CACrCC,SAAU,CAAC,GAAI,CAACC,cAAqBA,aAAmB,4EACxDC,iBAAkB,CAAC,GAAI,CAACD,iBAExB,CACEE,WAAYP,KAAKQ,UAAU,WAAY,qBAG7C,CAEIC,QACF,OAAOT,KAAKE,kBAAkBQ,QAChC,CAEAC,WACEX,KAAKY,SAAQC,KAAWb,KAAKV,MAAMwB,SAASC,SAASC,IAAI,SAC3D,CAEAC,0BACE,GAAIjB,KAAKE,kBAAkBgB,MAAO,CAChClB,KAAKE,kBAAkBiB,WAAW,CAAEP,MAASZ,KAAKY,QAClD,IAAIQ,EAAO,CACTR,MAASZ,KAAKY,MACdR,YAAYiB,KAAWrB,KAAKE,kBAAkBoB,MAAMlB,UACpDE,oBAAoBe,KAAWrB,KAAKE,kBAAkBoB,MAAMhB,mBAG9DN,KAAKJ,YAAY2B,cAAcH,GAAMI,UAAWC,IAC9CzB,KAAKF,OAAO4B,QAAQD,EAAIE,QAAS,GAAI,CAAEC,QAAS,MAChDC,WAAW,KACT7B,KAAKH,OAAOiC,SAAS,CAAC,eAAc,EACnC,IAAI,EAENC,IACC/B,KAAKF,OAAOkC,MAAMD,EAAIC,MAAMC,OAAQ,GAAI,CAAEL,QAAS,KAAM,EAC1D,MAGH5B,KAAKkC,yBAAyBlC,KAAKE,kBAEvC,CACAgC,yBAAyBC,GACvBC,OAAOC,OAAOF,EAAUzB,UAAU4B,QAAQC,IACxCA,EAAQC,gBACJD,aAAmBE,MACrBzC,KAAKkC,yBAAyBK,EAAO,EAG3C,CAEA/B,UAAUkC,EAAqBC,GAC7B,OAAQR,IACN,MACMS,EAAkBT,EAAUzB,SAASiC,GACvCC,EAAgBC,SAAWD,EAAgBC,OAAOrC,WAIpDoC,EAAgBE,UANFX,EAAUzB,SAASgC,GAKvBpB,QAAUsB,EAAgBtB,MACV,CAAEd,WAAW,GAEb,KAAI,CAGpC,CAACuC,kDAxEUtD,GAAsBuD,6GAAtBvD,EAAsBwD,guBFbnC5D,iBAA8B,UAA9BA,CAA8B,WAGxBA,iBACFA,QACAA,iBAAgC,UAAhCA,CAAgC,UAAhCA,CAAgC,QAGtBA,0BAAcA,QAClBA,aAAGA,iCAAoBA,QACvBA,mBAAsCA,mCAAY6D,2BAAyB,GACzE7D,gBAAK,cACsCA,yBAAYA,QACrDA,oBAIAA,mBACEA,2CAA6B,YAA7B6D,WAAwC,OAAO,UAAU,GAD3D7D,QAEAA,2BAGAA,2BAIFA,QACAA,gBAAK,eACuCA,6BAAgBA,QAC1DA,qBAIAA,mBACEA,4CAA+B,YAA/B6D,YAA0C,OAAO,UAAU,GAD7D7D,QAEAA,2BAGAA,2BAIFA,QACAA,mBAAoB,gBAC2CA,iBAAIA,6BAlC/DA,iDAIAA,0HAAqH,oKADhHA,yBAIeA,uGAEMA,0EAIzBA,iIAODA,0IAAqI,4LADhIA,0BAIeA,wGAEMA,oGAIzBA,ghBE1BJI,CAAsB,ODQ5B,IAAM0D,EAAmB,MAA1B,MAAOA,EAAmBJ,kDAAnBI,EAAmB,sCAAnBA,IAAmBJ,wCAL5BK,KACAC,KACAC,cAAsBhE,aAGb6D,CAAmB","names":["i0","route","path","component","ResetPasswordComponent","constructor","fb","authservice","router","toastr","_titleservice","this","setTitle","resetPasswordForm","group","password","Validators","confirm_password","validators","MustMatch","f","controls","ngOnInit","email","decryption","snapshot","paramMap","get","resetPasswordFormSubmit","valid","patchValue","data","encryption","value","resetPassword","subscribe","res","success","message","timeOut","setTimeout","navigate","err","error","detail","markAllControlsAsTouched","formGroup","Object","values","forEach","control","markAsTouched","FormGroup","controlName","matchingControlName","matchingControl","errors","setErrors","static","core","selectors","ctx","ResetPasswordModule","CommonModule","ReactiveFormsModule","RouterModule"],"sourceRoot":"webpack:///","sources":["./src/app/auth/reset-password/reset-password.component.html","./src/app/auth/reset-password/reset-password.module.ts","./src/app/auth/reset-password/reset-password.component.ts"],"sourcesContent":["<div class=\"container-fluid \">\n  <div class=\"row inner-box\">\n    <div class=\"col-sm-5 p-0 mob-left\">\n      <img class=\"bnrimg\" src=\"assets/images/reset-password.png\" alt=\"reset passwrd\">\n    </div>\n    <div class=\"col-sm-7 mob-right\">\n      <div class=\"login-box\">\n        <div class=\"login-box-inner\">\n          <h2>Reset Password</h2>\n          <p>Change your password</p>\n          <form [formGroup]=\"resetPasswordForm\" (ngSubmit)=\"resetPasswordFormSubmit()\">\n            <div>\n              <label for=\"password\" class=\"form-label\">New Password</label>\n              <input [type]=\"textType\" class=\"form-control\" formControlName=\"password\"\n                [class.is-invalid]=\"resetPasswordForm.controls['password'].invalid && resetPasswordForm.controls['password'].touched\"\n                [class.is-valid]=\"!resetPasswordForm.controls['password'].hasError('required') && resetPasswordForm.controls['password'].valid && resetPasswordForm.controls['password'].touched\"\n                placeholder=\"Password\">\n              <img class=\" eyeIcon\" [src]=\"textType == 'password'?'assets/images/eye.svg':'assets/images/eye-off.svg'\"\n                (click)=\"textType=(textType=='password'?'text':'password')\" />\n              <small class=\"text-danger\" *ngIf=\"resetPasswordForm.hasError('pattern', 'password')\"> Password must\n                contain at least one lowercase letter, uppercase letter, number and special character.\n              </small>\n              <small class=\"text-danger\"\n                *ngIf=\"resetPasswordForm.controls['password'].touched && resetPasswordForm.controls['password'].hasError('required')\">\n                Please enter your Password.\n              </small>\n            </div>\n            <div>\n              <label for=\"cpassword\" class=\"form-label\">Confirm Password</label>\n              <input [type]=\"textType2\" class=\"form-control\" formControlName=\"confirm_password\"\n                [class.is-invalid]=\"resetPasswordForm.controls['confirm_password'].invalid && resetPasswordForm.controls['confirm_password'].touched\"\n                [class.is-valid]=\"!resetPasswordForm.controls['confirm_password'].hasError('required') && resetPasswordForm.controls['confirm_password'].valid && resetPasswordForm.controls['confirm_password'].touched\"\n                placeholder=\"Confirm Password\">\n              <img class=\" eyeIcon\" [src]=\"textType2 == 'password'?'assets/images/eye.svg':'assets/images/eye-off.svg'\"\n                (click)=\"textType2=(textType2=='password'?'text':'password')\" />\n              <small class=\"text-danger\" *ngIf=\"f['confirm_password'].errors?.['MustMatch']\">\n                Confirm password does not match!.\n              </small>\n              <small class=\"text-danger\"\n                *ngIf=\"resetPasswordForm.controls['confirm_password'].touched && resetPasswordForm.controls['confirm_password'].hasError('required')\">\n                Please confirm your password.\n              </small>\n            </div>\n            <div class=\"d-grid\">\n              <button type=\"submit\" class=\"btn btn-primary btn-block lbtn\">Done</button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ResetPasswordComponent } from './reset-password.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nconst route:Routes = [\n  {\n    path:'',\n    component: ResetPasswordComponent\n  }\n]\n\n@NgModule({\n  declarations: [ResetPasswordComponent],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(route),\n  ]\n})\nexport class ResetPasswordModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { AuthService } from '../services/auth.service';\nimport { decryption, encryption } from 'src/app/encryption';\nimport { Title } from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.scss']\n})\nexport class ResetPasswordComponent implements OnInit {\n\n  email: any;\n  resetPasswordForm: FormGroup;\n  textType: any = 'password'\n  textType2: any = 'password'\n  constructor(private fb: FormBuilder, private authservice: AuthService, private router: Router,\n    private route: ActivatedRoute, private toastr: ToastrService, private _titleservice: Title) {\n    this._titleservice.setTitle('Reset Password');\n    this.resetPasswordForm = this.fb.group({\n      password: ['', [Validators.required, Validators.pattern(/(?=^.{8,}$)(?=.*\\d)(?=.*[!@#$%^&*]+)(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/)]],\n      confirm_password: ['', [Validators.required]]\n    },\n      {\n        validators: this.MustMatch('password', 'confirm_password')\n      });\n\n  }\n\n  get f() {\n    return this.resetPasswordForm.controls;\n  }\n\n  ngOnInit(): void {\n    this.email = decryption(this.route.snapshot.paramMap.get('email'));\n  }\n\n  resetPasswordFormSubmit() {\n    if (this.resetPasswordForm.valid) {\n      this.resetPasswordForm.patchValue({ 'email': this.email });\n      let data = {\n        \"email\": this.email,\n        \"password\": encryption(this.resetPasswordForm.value.password),\n        \"confirm_password\": encryption(this.resetPasswordForm.value.confirm_password)\n      };\n\n      this.authservice.resetPassword(data).subscribe((res: any) => {\n        this.toastr.success(res.message, '', { timeOut: 4000 });\n        setTimeout(() => {\n          this.router.navigate(['/auth/login']);\n        }, 1000);\n      },\n        (err: any) => {\n          this.toastr.error(err.error.detail, '', { timeOut: 2000 });\n        })\n    }\n    else\n      this.markAllControlsAsTouched(this.resetPasswordForm);\n\n  }\n  markAllControlsAsTouched(formGroup: FormGroup) {\n    Object.values(formGroup.controls).forEach(control => {\n      control.markAsTouched();\n      if (control instanceof FormGroup) {\n        this.markAllControlsAsTouched(control);\n      }\n    });\n  }\n\n  MustMatch(controlName: string, matchingControlName: string) {\n    return (formGroup: FormGroup) => {\n      const control = formGroup.controls[controlName];\n      const matchingControl = formGroup.controls[matchingControlName];\n      if (matchingControl.errors && !matchingControl.errors['MustMatch']) {\n        return;\n      }\n      if (control.value !== matchingControl.value) {\n        matchingControl.setErrors({ MustMatch: true });\n      } else {\n        matchingControl.setErrors(null);\n      }\n    }\n  }\n\n}\n"],"x_google_ignoreList":[]}