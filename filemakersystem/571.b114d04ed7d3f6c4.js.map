{"version":3,"file":"571.b114d04ed7d3f6c4.js","mappings":"qRAwDwBA,qBAAyDA,SAAaA,kCAAhCA,oBAAmBA,wBCzC1E,IAAMC,EAAmB,MAA1B,MAAOA,EAMXC,YACUC,EACAC,EACAC,EACAC,EACAC,EACAC,GALAC,UACAA,cACAA,cACAA,YACAA,qBACAA,oBAVVA,WAAa,GAGbA,cAAgB,IAAIC,SASlBD,KAAKF,cAAcI,SAAS,gBAC5BF,KAAKG,SAAWH,KAAKN,GAAGU,MAAM,CAC5BC,WAAY,CAAC,GAAIC,eACjBC,UAAW,CAAC,GAAID,eAChBE,UAAW,CAAC,GAAIF,eAChBG,MAAO,CAAC,GAAI,CAACH,cAAqBA,aAClCI,YAAa,CAAC,KAElB,CAEAC,WACEX,KAAKH,KAAKe,WAAW,GAAGC,kCAAyCC,KAAMC,IACjEA,IACFf,KAAKgB,SAAWD,EAAIE,KAAKC,UAG/B,CACAC,aAAaC,GACX,GAAIA,EAAMC,OAAOC,OAASF,EAAMC,OAAOC,MAAM,GAAI,CAC/C,MAAMC,EAAOH,EAAMC,OAAOC,MAAM,GAC1BE,EAAS,IAAIC,WACnBD,EAAOE,OAASC,GAAK3B,KAAK4B,MAAQJ,EAAOK,OACzCL,EAAOM,cAAcP,GACrBvB,KAAK+B,SAASC,OAAO,QAAST,EAAI,CAEtC,CAEAU,iBACEjC,KAAK+B,SAASC,OAAO,aAAchC,KAAKG,SAAS+B,MAAM7B,YACvDL,KAAK+B,SAASC,OAAO,YAAahC,KAAKG,SAAS+B,MAAM3B,WACtDP,KAAK+B,SAASC,OAAO,QAAShC,KAAKG,SAAS+B,MAAM1B,WAClDR,KAAK+B,SAASC,OAAO,QAAQhC,KAAKG,SAAS+B,MAAMzB,MAAM0B,eACvDnC,KAAK+B,SAASC,OAAO,cAAehC,KAAKG,SAAS+B,MAAMxB,aACxDV,KAAKH,KAAKuC,YAAY,GAAGvB,oBAA4Bb,KAAK+B,UAAUjB,KAAMC,IACrEA,IACDf,KAAKL,OAAO0C,cAAc,eAC1BrC,KAAKJ,OAAO0C,QAAQvB,EAAIwB,SAAO,EAGrC,CAEAC,gBACExC,KAAKG,SAASsC,OAChB,CAACC,kDAzDUlD,GAAmBmD,4GAAnBnD,EAAmBoD,y6CDfhCrD,qBAA0B,SAA1BA,CAA0B,SAA1BA,CAA0B,SAEiCA,gBAAIA,UAEvDA,gBAA4B,SAA6BA,2BAAeA,UACxEA,gBAA4B,SAA8DA,0BAAYA,YAGxGA,kBAA4B,WAA5BA,CAA4B,SAErBA,0BAAYA,QACjBA,qBACEA,gBACFA,UAEAA,mBAAqB,YAArBA,CAAqB,aAGbA,mBACDA,gBAAK,aAEAA,mBAEJA,QAEAA,qBAAmBA,kCAAUsD,iBAAoB,GAAjDtD,cAIRA,mBAAwB,cACSA,mCAAYsD,kBAAgB,GACrDtD,gBAAM,eACuCA,uBAAUA,QACrDA,qBAIFA,QACAA,gBAAK,eACmCA,sBAASA,QAC/CA,qBAIFA,QACAA,gBAAK,eACqCA,kBAAKA,QAC3CA,qBAIFA,QACAA,gBAAM,eACiCA,kBAAKA,QAC1CA,sBAAwD,gBACrCA,wBAAWA,QAC1BA,4BACJA,UAEFA,mBAAiB,eACsBA,0BAAYA,QAClDA,wBACDA,QACHA,mBAAyB,QACrBA,mBAA2DA,mIAC9DA,QACAA,sBAAsBA,gCAASsD,iBAAe,GAAoBtD,kBAAKA,QACvEA,sBAAoDA,mBAAMA,2BAjDrDA,0EAYHA,uCAIEA,4GAAuG,kIAOvGA,0GAAqG,+HAOrGA,kGAA6F,+HAQhEA,qCAWXA,2kHCpDzBC,CAAmB,KCRnBsD,EAAuB,MAA9B,MAAOA,EAAuBJ,kDAAvBI,EAAuB,sCAAvBA,EAAuBF,+ECPpCrD,uDDOauD,CAAuB,4CE4CtBvD,qBAAwDA,SAAaA,kCAA/BA,oBAAkBA,gEAU5DA,kBAAsL,cAEjKA,2DAAUA,wBAAoB,GADjDA,QAEAA,oBAA+EA,oBAAOA,SAAQ,yBAFvEA,mCAAkB,mBC/C9C,IAAMwD,EAAmB,MAA1B,MAAOA,EAWXtD,YAAqBC,EAAyBC,EAAwBqD,EAC5DpD,EAA+BE,EAA8BC,EAC7DF,EAA2BoD,GAFhBjD,UAAyBA,cAAwBA,aAC5DA,cAA+BA,qBAA8BA,oBAC7DA,YAA2BA,oBAVrCA,WAAa,GAIbA,cAAgB,IAAIC,SACpBD,aAAkB,EAElBA,iBAAmBkD,KAAKC,MAAMC,aAAaC,QAAQ,gBAAkB,IAInErD,KAAKF,cAAcI,SAAS,eAC5BF,KAAKG,SAAWH,KAAKN,GAAGU,MAAM,CAC5BC,WAAY,CAAC,GAAIC,eACjBC,UAAW,CAAC,GAAID,eAChBE,UAAW,CAAC,GAAIF,eAChBgD,OAAQ,CAAC,OAAOhD,eAChBG,MAAO,CAAC,GAAI,CAACH,cAAqBA,aAClCI,YAAa,CAAC,MAEhBV,KAAKuD,YAAcvD,KAAKiD,aAAaO,gBACvC,CAEA7C,WACEX,KAAKH,KAAKe,WAAW,GAAGC,kCAAyCC,KAAMC,IACjEA,IACFf,KAAKgB,SAAWD,EAAIE,KAAKC,WAE7B,IAAIuC,EAAKzD,KAAKgD,MAAMU,SAASC,SAASC,IAAI,MAC1C5D,KAAKH,KAAKe,WAAW,GAAGC,uBAA8B4C,MAAO3C,KAAMC,IACjE,GAAIA,EAAK,CACPf,KAAK6D,QAAU9C,EAAI8C,QACnB7D,KAAK4B,MAAQb,EAAIa,MACjB5B,KAAK8D,OAAS/C,EAAIgD,QAClB,IAAIC,EAAa,CACf3D,WAAcU,EAAIV,WAClBE,UAAaQ,EAAIR,UACjBE,MAASM,EAAIN,MACb6C,OAASvC,EAAIuC,OACb9C,UAA8B,MAAjBO,EAAIkD,OAAOR,GAAa,GAAK1C,EAAIkD,MAAMR,GACpD/C,YAAeK,EAAIL,aAErBV,KAAKG,SAAS+D,WAAWF,GACzBhE,KAAKgE,WAAaA,IAGxB,CAEA7C,aAAaC,GACX,GAAIA,EAAMC,OAAOC,OAASF,EAAMC,OAAOC,MAAM,GAAI,CAC/C,MAAMC,EAAOH,EAAMC,OAAOC,MAAM,GAC1BE,EAAS,IAAIC,WACnBD,EAAOE,OAASC,GAAK3B,KAAK4B,MAAQJ,EAAOK,OACzCL,EAAOM,cAAcP,GACrBvB,KAAK+B,SAASC,OAAO,QAAST,EAAI,CAEtC,CAEA4C,uBACEnE,KAAK+B,SAASC,OAAO,aAAchC,KAAKG,SAAS+B,MAAM7B,YACvDL,KAAK+B,SAASC,OAAO,YAAahC,KAAKG,SAAS+B,MAAM3B,WACtDP,KAAK+B,SAASC,OAAO,QAAShC,KAAKG,SAAS+B,MAAM1B,WAClDR,KAAK+B,SAASC,OAAO,SAAShC,KAAKG,SAAS+B,MAAMoB,QAClDtD,KAAK+B,SAASC,OAAO,cAAehC,KAAKG,SAAS+B,MAAMxB,aACxDV,KAAKD,aAAaqE,WAAWpE,KAAK+B,SAAU/B,KAAK6D,SAASQ,UAAWtD,IACnEf,KAAKJ,OAAO0C,QAAQvB,EAAIwB,QAAS,GAAI,CAAE+B,QAAS,MAChDtE,KAAKL,OAAO4E,SAAS,CAAC,eAAc,EAEnCC,IACCxE,KAAKJ,OAAO6E,MAAMD,EAAIC,MAAMC,OAAQ,GAAI,CAAEJ,QAAS,KAAM,EAE/D,CACAK,aAAavD,GACXpB,KAAK8D,QAAU9D,KAAK8D,OACpB9D,KAAKH,KAAKe,WAAW,GAAGC,yBAAgCb,KAAK6D,WAAW/C,KAAMC,IACzEA,GACDf,KAAKJ,OAAO0C,QAAQvB,EAAIwB,QAAO,EAGrC,CACAqC,kBACE5E,KAAKG,SAAS+D,WAAWlE,KAAKgE,WAChC,CAACtB,kDArFUK,GAAmBJ,mIAAnBI,EAAmBH,uuDDfhCrD,qBAA0B,SAA1BA,CAA0B,SAA1BA,CAA0B,SAE6BA,gBAAIA,UACvDA,gBAA4B,SAA4BA,2BAAeA,UACvEA,gBAA4B,SAA8DA,yBAAWA,YAEvGA,kBAA4B,WAA5BA,CAA4B,SAEnBA,yBAAWA,QAChBA,qBACEA,gBACFA,UAEFA,mBAAqB,YAArBA,CAAqB,aAGfA,mBACAA,gBAAK,aAEDA,mBACFA,QACAA,qBAAmBA,kCAAUsD,iBAAoB,GAAjDtD,cAINA,mBAAwB,cACOA,mCAAYsD,wBAAsB,GAC7DtD,gBAAK,eACwCA,uBAAUA,QACrDA,qBAIFA,QACAA,gBAAK,eACmCA,sBAASA,QAC/CA,qBAIFA,QACAA,gBAAK,eACmCA,kBAAKA,QAC3CA,qBAIFA,QACAA,gBAAK,eACkCA,kBAAKA,QAC1CA,sBACEA,4BACFA,UAEFA,gBAAK,eACkCA,mBAAMA,QAC3CA,sBAAqD,gBAC9BA,mBAAMA,QAC3BA,sBAAsBA,qBAAQA,YAGlCA,yBAOAA,mBAAiB,eACsBA,0BAAYA,QACjDA,wBACFA,QACAA,mBAAyB,QACpBA,mBAA4DA,mIAE/DA,QACAA,sBAAoDA,mBAAMA,2BA5DvDA,0EAUDA,uCAIAA,4GAAuG,kIAOvGA,0GAAqG,+HAOrGA,kGAA6F,+HAOpEA,qCAUvBA,gJAekBA,onIC7DrBwD,CAAmB,gHCHRxD,qBAA2DA,SAAcA,kCAAjEA,oBAAmDA,sDAGnEA,eAA0D,UACnBA,kBAA2DA,oBACtFA,iCA2CJA,mBAA+DA,kBAAMA,cAA/DA,mDACNA,mBAAoEA,oBAAQA,cAAtEA,4HAMFA,gBAEIA,0DAASA,yBAAgB,GAA6DA,gBAC9CA,0CADZA,kFAEhCA,gBAEgEA,sGAC5DA,kBAEJA,iDACAA,gBAGIA,uGAEAA,gBACJA,oGAvCZA,cACsI,OADtIA,CACsI,YAExGA,kBAElBA,kBAAqB,aACYA,SACpBA,QACTA,gBAAyBA,SAA0BA,cAI/DA,cACIA,UACJA,QACAA,eACIA,0BACAA,0BACJA,QACAA,eAAI,YAAJA,CAAI,WAGQA,yDAASA,yBAAgB,GAAGA,iBAAsCA,QACtEA,uBAIAA,uBAMAA,uBAOJA,WAAM,uCApCEA,yEAE6BA,6DAEJA,mCAKjCA,sDAG+BA,wCACEA,yCAIVA,mDAGdA,gJAGeA,sCAQfA,6HAQjBA,iBACIA,+BACJA,iDAGRA,kCACIA,+DAAcA,4BAAwB,GAAEA,+BAsDhCA,oBAAsFA,kHAEtFA,+BACAA,oBAEAA,yCACAA,+BAeAA,oBACAA,+CACAA,+BACAA,oBAEAA,2CACAA,oFCtKdsF,EAAiB,CACrB,CAAEC,KAAM,GAAIC,UAAWjC,EAAyBkC,SAAS,CACvD,CAACF,KAAK,GAAGC,UCQiB,MAAxB,MAAOE,EA2BXxF,YACUM,EAAmCmF,EACnCpF,EAA8BF,EAC9BqD,EACAkC,EACAtF,EACAH,GALAM,oBAAmCA,mBACnCA,qBAA8BA,cAC9BA,oBACAA,oBACAA,YACAA,UA5BVA,cAAgB,GAEhBA,UAAO,EACPA,cAAW,GACXA,WAAQ,GACRA,eAAiB,GAEjBA,gBAAqB,EAErBA,iBAAmBkD,KAAKC,MAAMC,aAAaC,QAAQ,gBAAkB,IAIrErD,WAAe,GACfA,cAAgB,WAChBA,eAAiB,WACjBA,mBAAuB,EAEvBA,eAAY,GACZA,eAAY,GAEZA,cAAW,IAAIoF,IASbpF,KAAKqF,SAASC,QAAKC,KAAa,MAAMlB,UAAUmB,IAAKxF,KAAKyF,sBAC1DzF,KAAKF,cAAcI,SAAS,mBAC5BF,KAAKuD,YAAcvD,KAAKiD,aAAaO,iBACrCxD,KAAK0F,kBAAoB1F,KAAKN,GAAGU,MAAM,CACrCuF,SAAU,CAAC,GAAI,CAACrF,cAAqBA,aAAmB,4EACxDsF,iBAAkB,CAAC,GAAI,CAACtF,iBAExB,CAAEuF,WAAY7F,KAAK8F,UAAU,WAAY,sBAE3C,MAAMC,GAAc7C,KAAKC,MAAMC,aAAaC,QAAQ,gBAAkB,IACtErD,KAAKgG,aAAwC,IAAzBD,IAAa9B,MAAMR,EACzC,CAEA9C,WACE,IAAIsF,EAAYjG,KAAKkF,YAAYgB,gBAC7BD,IACFjG,KAAKmG,KAAOF,GACdjG,KAAKyF,qBACLzF,KAAKH,KAAKe,WAAW,GAAGC,kCAAyCC,KAAMC,IACjEA,IACFf,KAAKgB,SAAWD,EAAIE,KAAKC,SAC3BlB,KAAKoG,KAAKpG,KAAKgB,SAAS,OAAM,EAElC,CACAoF,KAAKC,EAAYC,GACf,OAAOD,EAAMD,KAAK,CAACG,EAAQC,KACzB,IAAIC,EAAQF,EAAED,GAAKI,cACfC,EAAQH,EAAEF,GAAKI,cACnB,OAAID,EAAQE,GACH,EAELF,EAAQE,EACH,EAEF,GAEX,CACAC,iBACE5G,KAAKkF,YAAY0B,eAAeC,OAAOC,SAASC,KAAM/G,KAAKmG,KAC7D,CACAa,iBAAiBC,EAAqBd,EAAce,EAAkBC,GACpE,IAAIC,EAAc,GAClB,OAAIH,IACFG,EAAOC,OAAYJ,GAEjBd,IACFiB,EAAOjB,KAAUA,GAEfe,IACFE,EAAOE,UAAeJ,GAEpBC,IACFC,EAAOnD,MAAWkD,GAEbC,CACT,CAEA3B,mBAAmB8B,IACdA,GAAqC,KAAnBA,KACnBvH,KAAKwH,MAAQD,GAGf,MAAMH,EAASpH,KAAKgH,iBAAiBhH,KAAKwH,MAAOxH,KAAKmG,KAAMnG,KAAKkH,SAAUlH,KAAKmH,WAE7EnH,KAAKyH,YACNL,EAAOM,MAAQ1H,KAAKyH,UACpBL,EAAOO,SAAW3H,KAAK4H,WAEzB5H,KAAKD,aAAa8H,SAAST,GAC1B/C,UAAWtD,IACVf,KAAK8H,SAAW/G,EAAIE,KAAKC,QACzBlB,KAAK+H,UAAoC,GAAxB/H,KAAK8H,SAASE,OAC/BhI,KAAKiI,aAAelH,EAAIE,KAAKiH,OAE5B1D,MAGL,CAEA2D,sBAAsBT,EAAYU,GAChCpI,KAAKyH,UAAYC,EACjB1H,KAAK4H,UAAYQ,EACjBpI,KAAKyF,oBACP,CAEA4C,iBAAiBjH,GACfpB,KAAKmG,KAAO/E,EACZpB,KAAKyF,oBACP,CAEA6C,QAAQC,GACNvI,KAAKwH,MAAQe,EACbvI,KAAKmG,KAAO,EACZnG,KAAKyF,oBACP,CAEA+C,WAAWpH,GACTpB,KAAKmH,UAAY/F,EAAMC,OAAOa,MAC9BlC,KAAKmG,KAAO,EACZnG,KAAKyF,oBACP,CACAgD,SACEzI,KAAKH,KAAK6I,cAAc,GAAG7H,iBAAwBb,KAAK2I,aAAa9E,WAAW/C,KAAMC,IAChFA,IACFf,KAAKwH,MAAQ,GACbxH,KAAKJ,OAAO0C,QAAQvB,EAAIwB,SACxBvC,KAAKyF,qBAAkB,EAG7B,CAEAK,UAAU8C,EAAqBC,GAC7B,OAAQC,IACN,MACMC,EAAkBD,EAAUE,SAASH,GACvCE,EAAgBE,SAAWF,EAAgBE,OAAOnD,WAIpDiD,EAAgBG,UANFJ,EAAUE,SAASJ,GAKvB1G,QAAU6G,EAAgB7G,MACV,CAAE4D,WAAW,GAEb,KAAI,CAGpC,CAEAqD,0BACE,IAAKnJ,KAAK0F,kBAAkB0D,MAE1B,YADApJ,KAAKqJ,yBAAyBrJ,KAAK0F,mBAGrC1F,KAAK0F,kBAAkBxB,WAAW,CAAEzD,MAAST,KAAKS,QAClD,IAAIQ,EAAO,CACTR,MAAST,KAAKS,MACdkF,YAAY2D,KAAWtJ,KAAK0F,kBAAkBxD,MAAMyD,UACpDC,oBAAoB0D,KAAWtJ,KAAK0F,kBAAkBxD,MAAM0D,kBAC5D2D,eAAgB,GAElB,MAAMC,EAAoCC,SAASC,cAAc,eAC9DF,GAAUA,EAASG,QACtBC,QAAQC,IAAI5I,GAEZjB,KAAKmF,aAAa2E,cAAc7I,GAC/BoD,UACEtD,IACCf,KAAK0F,kBAAkBjD,QACvBzC,KAAKJ,OAAO0C,QAAQvB,EAAIwB,QAAS,GAAI,CAAE+B,QAAS,KAAM,EAEvDE,GAAaxE,KAAKJ,OAAO6E,MAAMD,EAAIC,MAAMC,OAAQ,GAAI,CAAEJ,QAAS,MAErE,CAEA+E,yBAAyBP,GACvBiB,OAAOC,OAAOlB,EAAUE,UAAUiB,QAAQC,IACxCA,EAAQC,gBACJD,aAAmBE,MACrBpK,KAAKqJ,yBAAyBa,EAAO,EAG3C,CAEIG,WACF,OAAOrK,KAAK0F,kBAAkBsD,QAChC,CAACtG,kDAtMUuC,GAAiBtC,iIAAjBsC,EAAiBrC,ywFFlB9BrD,qBAA2B,UAA3BA,CAA2B,UAA3BA,CAA2B,UAGQA,oBAAQA,QAC/BA,iBAAyB,QAAzBA,CAAyB,oBAE2BA,2CAAmB,EAAEsD,uBAA0B,GAAGtD,UAGlGA,eAAK,cACOA,kCAAUsD,eAAkB,GAChCtD,qBAAkBA,iCAAmBA,QACrCA,2BAAkFA,eACtFA,UAEJA,wBAIJA,UAEJA,mBAAiC,WAAjCA,CAAiC,WAAjCA,CAAiC,QAAjCA,CAAiC,YAAjCA,CAAiC,WAKGA,iBAAIA,QACpBA,2BAAaA,kCAAUsD,wBAAsB,aAAYyH,EAAQ,GAAE/K,YAG3EA,eAAI,YAAJA,CAAI,WAEoBA,sBAASA,QACzBA,2BAAaA,kCAAUsD,wBAAsB,QAAOyH,EAAQ,GAAE/K,YAGtEA,eAAI,YAAJA,CAAI,WAEoBA,mBAAMA,QACtBA,2BAAaA,kCAAUsD,wBAAsB,YAAWyH,EAAQ,GAAE/K,YAG1EA,eAAIA,mBAAMA,UAEdA,+CA2CAA,wBAGJA,UAEJA,yCAEJA,UAGJA,mBAAoC,YAApCA,CAAoC,YAApCA,CAAoC,YAApCA,CAAoC,YAApCA,CAAoC,YAKQA,wBAAWA,QACnCA,sBACJA,QACAA,mBAAwB,SAAxBA,CAAwB,SAAxBA,CAAwB,QAGTA,8CAAiCA,cAAGA,UACJA,QAAKA,eAACA,cAIrDA,mBAA0B,YAA1BA,CAA0B,gBAEiCA,mBAAMA,QACzDA,sBAAyCA,gCAASsD,UAAQ,GAC9BtD,oBAAOA,oBAS3DA,mBAA6D,YAA7DA,CAA6D,YAA7DA,CAA6D,YAA7DA,CAA6D,YAIzBA,2BAAcA,QACtCA,sBACFA,QACFA,mBAAwB,YAAxBA,CAAwB,SAAxBA,CAAwB,cAAxBA,CAAwB,WAIFA,yBAAYA,QAClBA,mBACIA,qBAIAA,mBACAA,2CAA6B,YAA7BsD,WAAwC,OAAO,UAAU,GADzDtD,YAIRA,2BAGAA,2BAIJA,QACAA,mBAAkB,cAAlBA,CAAkB,WAEJA,6BAAgBA,QACtBA,mBACIA,qBAIAA,mBACIA,4CAA+B,YAA/BsD,YAA0C,OAAO,UAAU,GAD/DtD,YAKRA,2BAGAA,2BAIJA,YAIRA,mBAA6C,gBACsCA,gCAASsD,2BAAyB,GAAEtD,mBAAMA,QAC3HA,sBAAsBA,gCAASsD,2BAAyB,GAAsBtD,kBAAKA,uBAzKxBA,sCAG/CA,oEA8BoBA,gGA0CNA,mCAKNA,oEAgBqCA,kIA0BlDA,iDAKmDA,8CAAqC,0GAArCA,CAAqC,oKAIhDA,uGAITA,0EAI3BA,iIAQ+CA,+CAAsC,0HAAtCA,CAAsC,4LAIjDA,wGAKTA,0GAI3BA,sgTE1JR0F,CAAiB,MDP1B,CAACH,KAAK,SAASC,UAAUvF,GACzB,CAACsF,KAAK,aAAaC,UAAUhC,GAC7B,CAAC+B,KAAK,WAAWC,UEAe,MAA9B,MAAOwF,EAOX9K,YACUK,EACAH,EACAqD,EACAjD,EACAL,EACAG,GALAG,qBACAA,cACAA,aACAA,oBACAA,UACAA,YAVVA,cAAgB,GAChBA,UAAY,GAUVA,KAAKF,cAAcI,SAAS,oBAC5BF,KAAKwK,eAAiBxK,KAAKN,GAAGU,MAAM,CAClCC,WAAY,CAAC,IACbE,UAAW,CAAC,IACZ4G,UAAW,CAAC,IACZ1G,MAAO,CAAC,IACRC,YAAa,CAAC,KAElB,CAEAC,WACEX,KAAK6D,QAAU7D,KAAKgD,MAAMU,SAASC,SAASC,IAAI,MAChD5D,KAAKyK,eACP,CACAA,gBACEzK,KAAKH,KAAKe,WAAW,GAAGC,uBAA8Bb,KAAK6D,YAAY/C,KAAMC,IACvEA,IACFf,KAAK0K,SAAW3J,EAQhBf,KAAKwK,eAAetG,WAPH,CACf7D,WAAcU,EAAIV,WAClBE,UAAaQ,EAAIR,UACjB4G,UAAapG,EAAIkD,MAAM0G,KACvBlK,MAASM,EAAIN,MACbC,YAAeK,EAAIL,cAEoB,EAG/C,CAACgC,kDA1CU6H,GAAuB5H,4GAAvB4H,EAAuB3H,+mCCbpCrD,qBAA0B,SAA1BA,CAA0B,SAA1BA,CAA0B,SAE6BA,gBAAIA,UACvDA,gBAA4B,SAA4BA,2BAAeA,UACvEA,gBAA4B,SAAuDA,uBAASA,YAE9FA,kBAA4B,WAA5BA,CAA4B,SAEnBA,2BAAaA,QAClBA,qBACEA,gBACFA,UAEFA,mBAAyB,YAAzBA,CAAyB,aAGnBA,mBACFA,UAEFA,mBAAwB,aAAxBA,CAAwB,SAAxBA,CAAwB,eAGyBA,wBAAWA,QACtDA,qBACFA,QACAA,gBAAK,eACmCA,uBAAUA,QAChDA,qBACFA,QACAA,gBAAK,eACmCA,mBAAMA,QAC5CA,qBACFA,QACAA,gBAAK,eACkCA,uBAAUA,QAC/CA,qBACFA,QACAA,mBAAiB,eACsBA,4BAAcA,QACnDA,wBACFA,yBAxBKA,mFAIDA,q2HDPDgL,CAAuB,SFQ7B,IAAMK,GAA2B,MAAlC,MAAOA,EAA2BlI,kDAA3BkI,EAA2B,sCAA3BA,IAA2BlI,wCAH5BmI,cAAsBhG,GACtBgG,eAECD,CAA2B,oBISjC,IAAME,GAAoB,MAA3B,MAAOA,EAAoBpI,kDAApBoI,EAAoB,sCAApBA,IAAoBpI,wCAR7BqI,KACAH,GACAI,KACAC,KACAC,KACAC,eAGSL,CAAoB","names":["i0","CreateUserComponent","constructor","fb","router","toastr","crud","_titleservice","_roleservice","this","FormData","setTitle","userForm","group","first_name","Validators","last_name","role_type","email","description","ngOnInit","getRequest","requestUrl","then","res","roleList","data","results","onFileChange","event","target","files","file","reader","FileReader","onload","e","image","result","readAsDataURL","formData","append","userFormSubmit","value","toLowerCase","postRequest","navigateByUrl","success","message","userFormReset","reset","static","core","selectors","ctx","RoleManagementComponent","UpdateUserComponent","route","_permissions","JSON","parse","localStorage","getItem","status","permissions","getPermissions","id","snapshot","paramMap","get","user_id","onStop","on_stop","updatedata","roles","patchValue","userUpdateFormSubmit","updateUser","subscribe","timeOut","navigate","err","error","detail","updateOnStop","resetUserUpdate","routes","path","component","children","UserListComponent","pageService","_authservice","Subject","onSearch","pipe","debounceTime","_","retrieveAdminRoles","resetPasswordForm","password","confirm_password","validators","MustMatch","userdetails","isSuperAdmin","checkPage","getPageDetail","page","sort","array","key","a","b","nameA","toUpperCase","nameB","savePageDetail","window","location","href","getRequestParams","searchTitle","pageSize","user_type","params","search","page_size","searchKeywords","title","sortField","field","order_in","sortOrder","getRoles","payments","showError","length","totalPayment","count","getAdminRolesOnFilter","type","handlePageChange","onKeyUp","x","roleChange","delete","deleteRequest","selectedUser","controlName","matchingControlName","formGroup","matchingControl","controls","errors","setErrors","resetPasswordFormSubmit","valid","markAllControlsAsTouched","encryption","is_hard_reset","closeBtn","document","querySelector","click","console","log","resetPassword","Object","values","forEach","control","markAsTouched","FormGroup","form","$event","ViewUserdetailComponent","userdetailForm","getUserDetail","userdata","name","RoleManagementRoutingModule","RouterModule","RoleManagementModule","CommonModule","NgxPaginationModule","FormsModule","ReactiveFormsModule","SharedComponentsModule"],"sourceRoot":"webpack:///","sources":["./src/app/admin/role-management/create-user/create-user.component.html","./src/app/admin/role-management/create-user/create-user.component.ts","./src/app/admin/role-management/role-management.component.ts","./src/app/admin/role-management/role-management.component.html","./src/app/admin/role-management/update-user/update-user.component.html","./src/app/admin/role-management/update-user/update-user.component.ts","./src/app/admin/role-management/user-list/user-list.component.html","./src/app/admin/role-management/role-management-routing.module.ts","./src/app/admin/role-management/user-list/user-list.component.ts","./src/app/admin/role-management/view-userdetail/view-userdetail.component.ts","./src/app/admin/role-management/view-userdetail/view-userdetail.component.html","./src/app/admin/role-management/role-management.module.ts"],"sourcesContent":["<section class=\"add-user\">\n    <ul class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\"><a routerLink=\"/admin\">Home</a></li>\n       \n        <li class=\"breadcrumb-item\"><a routerLink=\"/admin/role\" >User Management</a></li>\n        <li class=\"breadcrumb-item\"><a routerLink=\"/admin/role/create\" routerLinkActive=\"active\"> Add New User</a></li>\n      </ul>\n\n      <div class=\"add-user-inner\">\n        <div class=\"d-flex justify-content-between align-items-center\">\n        <h2> Add New User</h2>\n        <button class=\"backBtn\" routerLink=\"/admin/role\">\n          <i class=\"fa fa-long-arrow-left\" aria-hidden=\"true\"></i>\n        </button>\n        </div>\n        <div class=\"addUser\">\n        <div class=\"profile-info\">\n            <div class=\"upload-pic\">\n                <img [src]=\"image || 'assets/images/icon/avtarIcon.jpeg'\" alt=\"upload\"/>\n               <div>\n                <div class=\"uploadtext\">\n                    <img src=\"assets/images/icon/camraIcon.png\" alt=\"upload\"/>\n                   \n                </div>\n              \n                <input type=\"file\" (change)=\"onFileChange($event)\" accept=\"image/png, image/gif, image/jpeg\">\n               </div>\n            </div>\n        </div>\n        <div class=\"formFields\">\n            <form [formGroup]=\"userForm\" (ngSubmit)=\"userFormSubmit()\">\n                <div >\n                  <label for=\"first_name\" class=\"form-label\">First Name</label>\n                  <input type=\"text\" class=\"form-control\" formControlName=\"first_name\"\n                    [class.is-invalid]=\"userForm.controls['first_name'].invalid && userForm.controls['first_name'].touched\"\n                    [class.is-valid]=\"!userForm.controls['first_name'].invalid && userForm.controls['first_name'].valid && userForm.controls['first_name'].touched\"\n                  placeholder=\"Enter First Name\">\n                </div>\n                <div>\n                  <label for=\"lname\" class=\"form-label\">Last Name</label>\n                  <input type=\"text\" class=\"form-control\" formControlName=\"last_name\"\n                    [class.is-invalid]=\"userForm.controls['last_name'].invalid && userForm.controls['last_name'].touched\"\n                    [class.is-valid]=\"!userForm.controls['last_name'].invalid && userForm.controls['last_name'].valid && userForm.controls['last_name'].touched\" \n                   placeholder=\"Enter Last Name\" >\n                </div>\n                <div>\n                    <label for=\"email\" class=\"form-label\">Email</label>\n                    <input type=\"email\" class=\"form-control\" formControlName=\"email\"\n                    [class.is-invalid]=\"userForm.controls['email'].invalid && userForm.controls['email'].touched\"\n                    [class.is-valid]=\"!userForm.controls['email'].hasError('pattern') && userForm.controls['email'].valid && userForm.controls['email'].touched\" \n                      placeholder=\"Enter Email\" >\n                  </div>\n                  <div >\n                    <label for=\"role\" class=\"form-label\">Roles</label>\n                    <select class=\"form-select\" formControlName=\"role_type\">\n                      <option value=\"\">Select Role</option>\n                        <option *ngFor=\"let role of roleList\" [value]=\"role.id\" >{{role.name}}</option>\n                    </select>\n                  </div>\n                  <div class=\"des\">\n                    <label for=\"des\" class=\"form-label\"> Description </label>\n                   <textarea class=\"form-control\" formControlName=\"description\"></textarea>\n                  </div>\n               <div class=\"submitReset\">\n                <p><img src=\"assets/images/icon/Info.png\" alt=\"verify email\"/>An email verification will be sent to the user, and once confirmed, temporary credentials will be sent via email. \n                </p>\n                <button type=\"button\" (click)=\"userFormReset()\" class=\"ressetBtn\">Reset</button>\n                <button type=\"submit\" [disabled]=\"userForm.invalid\">Submit</button>\n               </div>\n              </form>\n        </div>\n      </div>\n      </div>\n</section>\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Title } from '@angular/platform-browser';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { RoleService } from '../../services/role.service';\nimport { CrudService } from 'src/app/services/crud.service';\nimport { requestUrl } from 'src/app/services/adminReqUrl.const';\n\n\n@Component({\n  selector: 'app-create-user',\n  templateUrl: './create-user.component.html',\n  styleUrls: ['./create-user.component.scss']\n})\nexport class CreateUserComponent implements OnInit {\n\n  image: any = '';\n  userForm: FormGroup;\n  roleList: any;\n  formData: any = new FormData();\n  constructor(\n    private fb: FormBuilder,\n    private router: Router,\n    private toastr: ToastrService,\n    private crud: CrudService,\n    private _titleservice: Title,\n    private _roleservice: RoleService,\n  ) {\n    this._titleservice.setTitle('Add New User')\n    this.userForm = this.fb.group({\n      first_name: ['', Validators.required],\n      last_name: ['', Validators.required],\n      role_type: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      description: ['']\n    });\n  }\n\n  ngOnInit(): void {\n    this.crud.getRequest(`${requestUrl.getAdminRolesAndPermission}`).then((res: any) => {\n      if (res) {\n        this.roleList = res.data.results;\n      }\n    });\n  }\n  onFileChange(event: any) {\n    if (event.target.files && event.target.files[0]) {\n      const file = event.target.files[0];\n      const reader = new FileReader();\n      reader.onload = e => this.image = reader.result;\n      reader.readAsDataURL(file);\n      this.formData.append(\"image\", file);\n    }\n  }\n\n  userFormSubmit() {\n    this.formData.append(\"first_name\", this.userForm.value.first_name);\n    this.formData.append(\"last_name\", this.userForm.value.last_name);\n    this.formData.append(\"roles\", this.userForm.value.role_type);\n    this.formData.append(\"email\",this.userForm.value.email.toLowerCase());\n    this.formData.append(\"description\", this.userForm.value.description);\n    this.crud.postRequest(`${requestUrl.postAdminRole}`, this.formData).then((res: any) => {\n      if(res){\n        this.router.navigateByUrl('/admin/role')\n        this.toastr.success(res.message)\n      }\n    });\n  }\n\n  userFormReset() {\n    this.userForm.reset();\n  }\n}","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-role-management',\n  templateUrl: './role-management.component.html',\n  styleUrls: ['./role-management.component.scss']\n})\nexport class RoleManagementComponent {\n\n}\n","<router-outlet></router-outlet>","<section class=\"add-user\">\n  <ul class=\"breadcrumb\">\n    <li class=\"breadcrumb-item\"><a routerLink=\"/admin\">Home</a></li>\n    <li class=\"breadcrumb-item\"><a routerLink=\"/admin/role\">User Management</a></li>\n    <li class=\"breadcrumb-item\"><a routerLink=\"/admin/role/update\" routerLinkActive=\"active\"> Update User</a></li>\n  </ul>\n  <div class=\"add-user-inner\">\n    <div class=\"d-flex justify-content-between align-items-center\">\n      <h2> Update User</h2>\n      <button class=\"backBtn\" routerLink=\"/admin/role\">\n        <i class=\"fa fa-long-arrow-left\" aria-hidden=\"true\"></i>\n      </button>\n    </div>\n    <div class=\"addUser\">\n      <div class=\"profile-info\">\n        <div class=\"upload-pic\">\n          <img [src]=\"image || 'assets/images/icon/avtarIcon.jpeg'\" alt=\"avatar\" />\n          <div>\n            <div class=\"uploadtext\">\n              <img src=\"assets/images/icon/camraIcon.png\" alt=\"upload\" />\n            </div>\n            <input type=\"file\" (change)=\"onFileChange($event)\" accept=\"image/png, image/gif, image/jpeg\">\n          </div>\n        </div>\n      </div>\n      <div class=\"formFields\">\n        <form [formGroup]=\"userForm\" (ngSubmit)=\"userUpdateFormSubmit()\">\n          <div>\n            <label for=\"first_name\" class=\"form-label\">First Name</label>\n            <input type=\"text\" class=\"form-control\" formControlName=\"first_name\"\n              [class.is-invalid]=\"userForm.controls['first_name'].invalid && userForm.controls['first_name'].touched\"\n              [class.is-valid]=\"!userForm.controls['first_name'].invalid && userForm.controls['first_name'].valid && userForm.controls['first_name'].touched\"\n              placeholder=\"Enter First Name\">\n          </div>\n          <div>\n            <label for=\"lname\" class=\"form-label\">Last Name</label>\n            <input type=\"text\" class=\"form-control\" formControlName=\"last_name\"\n              [class.is-invalid]=\"userForm.controls['last_name'].invalid && userForm.controls['last_name'].touched\"\n              [class.is-valid]=\"!userForm.controls['last_name'].invalid && userForm.controls['last_name'].valid && userForm.controls['last_name'].touched\"\n              placeholder=\"Enter Last Name\">\n          </div>\n          <div>\n            <label for=\"email\" class=\"form-label\">Email</label>\n            <input type=\"email\" class=\"form-control\" readonly formControlName=\"email\"\n              [class.is-invalid]=\"userForm.controls['email'].invalid && userForm.controls['email'].touched\"\n              [class.is-valid]=\"!userForm.controls['email'].hasError('pattern') && userForm.controls['email'].valid && userForm.controls['email'].touched\"\n              placeholder=\"Enter Email\">\n          </div>\n          <div>\n            <label for=\"role\" class=\"form-label\">Roles</label>\n            <select class=\"form-select\" formControlName=\"role_type\">\n              <option *ngFor=\"let role of roleList\" [value]=\"role.id\">{{role.name}}</option>\n            </select>\n          </div>\n          <div>\n            <label for=\"role\" class=\"form-label\">Status</label>\n            <select class=\"form-select\" formControlName=\"status\">\n              <option value=\"True\">Active</option>\n              <option value=\"False\">Inactive</option>\n            </select>\n          </div>\n          <div *ngIf=\"permissions.user_management == 'Full access' && (usersdetail.role == 'Internal_Team' || usersdetail.role == 'AIREMAP_ADMIN')\" style=\"display: flex; align-items: center;\">\n            <input type=\"checkbox\" [checked]=\"onStop\" style=\"margin-top: 25px;\" id=\"vehicle1\" name=\"vehicle1\"\n              [value]=\"onStop\" (change)=\"updateOnStop($event)\">\n            <label for=\"vehicle1\" style=\"padding-bottom: 0px; margin: 25px 0px 0px 20px;\"> On Stop</label>\n            <!-- <input type=\"checkbox\" class=\"\" style=\"margin-top: 25px;\" (change)=\"updateOnStop($event)\">\n            <label for=\"role\" class=\"form-label\"></label> -->\n          </div>\n          <div class=\"des\">\n            <label for=\"des\" class=\"form-label\"> Description </label>\n            <textarea class=\"form-control\" formControlName=\"description\"></textarea>\n          </div>\n          <div class=\"submitReset\">\n            <p><img src=\"assets/images/icon/Info.png\" alt=\"verify email\" />An email verification will be sent to the\n              user, and once confirmed, temporary credentials will be sent via email. \n            </p>\n            <button type=\"submit\" [disabled]=\"userForm.invalid\">Update</button>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</section>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Title } from '@angular/platform-browser';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { RoleService } from '../../services/role.service';\nimport { CrudService } from 'src/app/services/crud.service';\nimport { requestUrl } from 'src/app/services/adminReqUrl.const';\nimport { PermissionsService } from '../../services/permissions.service';\n\n@Component({\n  selector: 'app-update-user',\n  templateUrl: './update-user.component.html',\n  styleUrls: ['./update-user.component.scss']\n})\nexport class UpdateUserComponent implements OnInit {\n\n  user_id: any;\n  image: any = '';\n  updatedata: any;\n  userForm: FormGroup;\n  roleList: any;\n  formData: any = new FormData();\n  onStop: boolean = false;\n  permissions: any;\n  usersdetail: any = JSON.parse(localStorage.getItem('userdetails') || '');\n  constructor( private fb: FormBuilder, private router: Router, private route: ActivatedRoute,\n    private toastr: ToastrService, private _titleservice: Title, private _roleservice: RoleService,\n    private crud: CrudService, private _permissions: PermissionsService ) {\n    this._titleservice.setTitle('Update User')\n    this.userForm = this.fb.group({\n      first_name: ['', Validators.required],\n      last_name: ['', Validators.required],\n      role_type: ['', Validators.required],\n      status: ['true',Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      description: [''],\n    });\n    this.permissions = this._permissions.getPermissions();\n  }\n\n  ngOnInit(): void {\n    this.crud.getRequest(`${requestUrl.getAdminRolesAndPermission}`).then((res: any) => {\n      if (res)\n        this.roleList = res.data.results;\n    });\n    let id = this.route.snapshot.paramMap.get('id');\n    this.crud.getRequest(`${requestUrl.getAdminRoleById}${id}/`).then((res: any) => {\n      if (res) {\n        this.user_id = res.user_id;\n        this.image = res.image;\n        this.onStop = res.on_stop\n        let updatedata = {\n          \"first_name\": res.first_name,\n          \"last_name\": res.last_name,\n          \"email\": res.email,\n          \"status\":res.status,\n          \"role_type\": res.roles?.id == null ? '' : res.roles.id,\n          \"description\": res.description\n        };\n        this.userForm.patchValue(updatedata);\n        this.updatedata = updatedata;\n      }\n    });\n  }\n\n  onFileChange(event: any) {\n    if (event.target.files && event.target.files[0]) {\n      const file = event.target.files[0];\n      const reader = new FileReader();\n      reader.onload = e => this.image = reader.result;\n      reader.readAsDataURL(file);\n      this.formData.append(\"image\", file);\n    }\n  }\n\n  userUpdateFormSubmit() {\n    this.formData.append(\"first_name\", this.userForm.value.first_name);\n    this.formData.append(\"last_name\", this.userForm.value.last_name);\n    this.formData.append(\"roles\", this.userForm.value.role_type);\n    this.formData.append(\"status\",this.userForm.value.status);\n    this.formData.append(\"description\", this.userForm.value.description);\n    this._roleservice.updateUser(this.formData, this.user_id).subscribe((res: any) => {\n      this.toastr.success(res.message, '', { timeOut: 4000 });\n      this.router.navigate(['/admin/role']);\n    },\n      (err: any) => {\n        this.toastr.error(err.error.detail, '', { timeOut: 4000 });\n      });\n  }\n  updateOnStop(event:any){\n    this.onStop = !this.onStop;\n    this.crud.getRequest(`${requestUrl.updateOnStopOfUser}${this.user_id}`).then((res: any) => {\n      if(res){\n        this.toastr.success(res.message);\n      }\n    });\n  }\n  resetUserUpdate() {\n    this.userForm.patchValue(this.updatedata);\n  }\n}","<section class=\"user-list\">\n    <div class=\"ulist-div\">\n        <div class=\"u-add after-seperator\">\n            <h2 class=\"main-title\">All User</h2>\n            <div class=\"u-add-right\">\n                <div>\n                    <smart-search placeholder=\"Search for User\" (onSearch)=\"page = 1;retrieveAdminRoles($event);\"></smart-search>\n                    <!-- <input type=\"text\" [(ngModel)]=\"title\" (keyup)=\"onSearch.next(null)\" placeholder=\"Search by name\" /> -->\n                </div>\n                <div>\n                    <select (change)=\"roleChange($event)\">\n                        <option value=\"\"> Filter by Role Type</option>\n                        <option value=\"{{role.id}}\" *ngFor=\"let role of roleList\"> {{role.name}} </option>>\n                    </select>\n                </div>\n                <div *ngIf=\"permissions.user_management == 'Full access'\">\n                    <a routerLink=\"/admin/role/create\"><img src=\"assets/images/icon/addIcon.png\" alt=\"add user\" />Add\n                        User</a>\n                </div>\n            </div>\n        </div>\n        <div class=\"responsive-tbl mt-4\">\n            <table>\n                <thead>\n                    <th>\n                        <div class=\"d-flex align-items-center\">\n                            <p class=\"mb-0\">Name</p>\n                            <sort-button (onSort)=\"getAdminRolesOnFilter('first_name',$event)\"></sort-button>\n                        </div>\n                    </th>\n                    <th>\n                        <div class=\"d-flex align-items-center\">\n                            <p class=\"mb-0\">Role Type</p>\n                            <sort-button (onSort)=\"getAdminRolesOnFilter('roles',$event)\"></sort-button>\n                        </div>\n                    </th>\n                    <th>\n                        <div class=\"d-flex align-items-center\">\n                            <p class=\"mb-0\">Status</p>\n                            <sort-button (onSort)=\"getAdminRolesOnFilter('is_active',$event)\"></sort-button>\n                        </div>\n                    </th>\n                    <th>Action</th>\n                </thead>\n                <tr\n                    *ngFor=\"let adminrole of payments | paginate : {itemsPerPage: pageSize,currentPage: page,totalItems: totalPayment};let i = index\">\n                    <td>\n                        <div class=\"tdholder\"><img class=\"userImg\"\n                                [src]=\"adminrole.image || 'assets/images/icon/avtarIcon.jpeg'\" alt=\"avatar\" />\n                            <div class=\"tdinner\">\n                                <span style=\"cursor: auto;\"> {{adminrole.first_name || ''}} {{adminrole.last_name ||\n                                    ''}} </span>\n                                <p style=\"cursor: auto;\">{{adminrole.email || ''}} </p>\n                            </div>\n                        </div>\n                    </td>\n                    <td>\n                        {{ adminrole.roles != null ? adminrole.roles.name : '' }}\n                    </td>\n                    <td>\n                        <span [ngClass]=\"'activecls'\" *ngIf=\"adminrole.status=='True'\">Active</span>\n                        <span [ngClass]=\"'Inactivecls'\" *ngIf=\"adminrole.status == 'False'\">Inactive</span>\n                    </td>\n                    <td>\n                        <div class=\"actiontd\">\n                            <a class=\"eyeIcon\" [routerLink]=\"['/admin/role/view/', adminrole.user_id]\"\n                                (click)=\"savePageDetail();\"><i class=\"fa fa-eye\" title=\"View\"></i></a>\n                            <a class=\"edit\"\n                                *ngIf=\"permissions.user_management == 'Full access' && (usersdetail.role == 'Internal_Team' || usersdetail.role == 'AIREMAP_ADMIN')\"\n                                (click)=\"savePageDetail();\" [routerLink]=\"['/admin/role/update/', adminrole.user_id]\"><i\n                                    class=\"fa fa-edit\" title=\"Edit\"></i></a>\n                            <a class=\"eyeIcon\" *ngIf=\"isSuperAdmin\"\n                                title=\"Reset Password\"\n                                data-bs-toggle=\"modal\" data-bs-target=\"#resetPasswordModal\" (click)=\"email = adminrole.email\">\n                                <img width=\"32px\" height=\"32px\" src=\"assets/images/icon/passwordIcon.svg\" alt=\"\">\n                                <!-- <i class=\"fa fa-edit\" title=\"Edit\"></i> -->\n                            </a>\n                            <a class=\"edit\" style=\"cursor: pointer;border-color: red;\"\n                                title=\"Delete User\"\n                                *ngIf=\"adminrole.roles.name !='Admin Management' && permissions.user_management == 'Full access'\"\n                                (click)=\"selectedUser = adminrole\" data-bs-toggle=\"modal\"\n                                data-bs-target=\"#deleteModal\">\n                                <i class=\"fa fa-trash-o\" style=\"color: red;\"></i>\n                            </a>\n                        </div>\n                    </td>\n                </tr>\n                <tr class=\"errcls\" *ngIf=\"showError\">\n                    Records not found\n                </tr>\n            </table>\n        </div>\n        <pagination-controls *ngIf=\"payments?.length !=0\" class=\"pagination-crl\" previousLabel=\"Prev\" nextLabel=\"Next\"\n            (pageChange)=\"handlePageChange($event)\"></pagination-controls>\n    </div>\n</section>\n<!-- Delete Modal -->\n<div class=\"modal\" id=\"deleteModal\">\n    <div class=\"v-align\">\n        <div class=\"modal-dialog\">\n            <div class=\"modal-content deleteModal\">\n                <div class=\"modal-header\">\n                    <h4 class=\"modal-title\">Delete User</h4>\n                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n                </div>\n                <div class=\"modal-body\">\n                    <div>\n                        <div>\n                            <p>Are you sure, you want to delete <b>{{selectedUser?.first_name}}\n                                    {{selectedUser?.last_name}}</b> ?</p>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"modal-footer\">\n                    <div class=\"flexDiv\">\n                        <button class=\"btn cancel\" data-bs-dismiss=\"modal\">Cancel</button>\n                        <button type=\"button\" class=\"btn delete\" (click)=\"delete()\"\n                            data-bs-dismiss=\"modal\">Confirm</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<!-- Password Reset Modal -->\n<div class=\"modal productModal mt-4\" id=\"resetPasswordModal\">\n    <div class=\"modal-dialog\">\n      <div class=\"modal-content\" style=\"min-width:0;\">\n        <div class=\"modal-header\">\n            <h4 class=\"modal-title\">Reset Password</h4>\n            <button type=\"button\" class=\"btn-close\" id=\"closemodal\" data-bs-dismiss=\"modal\"></button>\n          </div>\n        <div class=\"modal-body\">\n            <div [formGroup]=\"resetPasswordForm\" >\n                <div>\n                    <label for=\"password\" class=\"form-label\">\n                        <span>New Password</span>\n                        <div class=\"input-icon mt-2\">\n                            <input type=\"text\" class=\"form-control\" [class.pswd]=\"(textType=='password')\" formControlName=\"password\"\n                            [class.is-invalid]=\"resetPasswordForm.controls['password'].invalid && resetPasswordForm.controls['password'].touched\"\n                            [class.is-valid]=\"!resetPasswordForm.controls['password'].hasError('required') && resetPasswordForm.controls['password'].valid && resetPasswordForm.controls['password'].touched\"\n                            placeholder=\"Password\">\n                            <img alt=\"\" class=\" eyeIcon\" [src]=\"textType == 'password'?'assets/images/eye.svg':'assets/images/eye-off.svg'\"\n                            (click)=\"textType=(textType=='password'?'text':'password')\" />\n                        </div>\n                    </label>\n                    <small class=\"text-danger\" *ngIf=\"resetPasswordForm.hasError('pattern', 'password')\"> Password must\n                    contain at least one lowercase letter, uppercase letter, number and special character.\n                    </small>\n                    <small class=\"text-danger\"\n                    *ngIf=\"resetPasswordForm.controls['password'].touched && resetPasswordForm.controls['password'].hasError('required')\">\n                    Please enter your Password.\n                    </small>\n                </div>\n                <div class=\"mt-3\">\n                    <label for=\"cpassword\" class=\"form-label\">\n                        <span>Confirm Password</span>\n                        <div class=\"input-icon mt-2\">\n                            <input type=\"text\" class=\"form-control\" [class.pswd]=\"(textType2=='password')\" formControlName=\"confirm_password\"\n                                [class.is-invalid]=\"resetPasswordForm.controls['confirm_password'].invalid && resetPasswordForm.controls['confirm_password'].touched\"\n                                [class.is-valid]=\"!resetPasswordForm.controls['confirm_password'].hasError('required') && resetPasswordForm.controls['confirm_password'].valid && resetPasswordForm.controls['confirm_password'].touched\"\n                                placeholder=\"Confirm Password\">\n                            <img alt=\"\" class=\" eyeIcon\" [src]=\"textType2 == 'password'?'assets/images/eye.svg':'assets/images/eye-off.svg'\"\n                                (click)=\"textType2=(textType2=='password'?'text':'password')\" />\n                        </div>\n                    </label>\n\n                    <small class=\"text-danger\" *ngIf=\"form['confirm_password'].errors?.['MustMatch']\">\n                    Confirm password does not match!.\n                    </small>\n                    <small class=\"text-danger\"\n                    *ngIf=\"resetPasswordForm.controls['confirm_password'].touched && resetPasswordForm.controls['confirm_password'].hasError('required')\">\n                    Please confirm your password.\n                    </small>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"d-flex justify-content-end mt-3\">\n          <button type=\"button\" class=\"btn cancel\" id=\"closemodal\" data-bs-dismiss=\"modal\" (click)=\"resetPasswordForm.reset()\">Cancel</button>\n          <button type=\"submit\" (click)=\"resetPasswordFormSubmit()\" class=\"btn assign\" >Reset</button>\n        </div>\n      </div>\n    </div>\n  </div>","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CreateUserComponent } from './create-user/create-user.component';\nimport { RoleManagementComponent } from './role-management.component';\nimport { UpdateUserComponent } from './update-user/update-user.component';\nimport { UserListComponent } from './user-list/user-list.component';\nimport { ViewUserdetailComponent } from './view-userdetail/view-userdetail.component';\n\nconst routes: Routes = [\n  { path: '', component: RoleManagementComponent, children:[\n    {path:'',component:UserListComponent},\n    {path:'create',component:CreateUserComponent},\n    {path:'update/:id',component:UpdateUserComponent},\n    {path:'view/:id',component:ViewUserdetailComponent}\n  ]  \n}];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class RoleManagementRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { PermissionsService } from '../../services/permissions.service';\nimport { RoleService } from '../../services/role.service';\nimport { requestUrl } from 'src/app/services/adminReqUrl.const';\nimport { CrudService } from 'src/app/services/crud.service';\nimport { UploadFileService } from 'src/app/services/upload-file.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { encryption } from 'src/app/encryption';\nimport { AuthService } from 'src/app/auth/services/auth.service';\nimport { debounceTime, Subject } from 'rxjs';\n\n@Component({\n  selector: 'app-user-list',\n  templateUrl: './user-list.component.html',\n  styleUrls: ['./user-list.component.scss']\n})\nexport class UserListComponent implements OnInit {\n\n  roles: any;\n  roleList: any;\n  permissions: any;\n  payments: any = [];\n  params: any;\n  page = 1;\n  pageSize = 10;\n  title = '';\n  user_type: any = '';\n  totalPayment: any;\n  showError: boolean = false;\n  selectedUser: any;\n  usersdetail: any = JSON.parse(localStorage.getItem('userdetails') || '');\n\n  // Form to Hard Reset User password (Only for Super Admin)\n  resetPasswordForm: FormGroup;\n  email:string = '';\n  textType: any = 'password'\n  textType2: any = 'password'\n  isSuperAdmin:boolean = false;\n\n  sortField = '';\n  sortOrder = '';\n\n  onSearch = new Subject<null>()\n  constructor(\n    private _roleservice: RoleService, private pageService: UploadFileService,\n    private _titleservice: Title, private toastr: ToastrService,\n    private _permissions: PermissionsService,\n    private _authservice: AuthService,\n    private crud: CrudService,\n    private fb:FormBuilder,\n  ) {\n    this.onSearch.pipe(debounceTime(800)).subscribe(_ => this.retrieveAdminRoles())\n    this._titleservice.setTitle('User Management');\n    this.permissions = this._permissions.getPermissions();\n    this.resetPasswordForm = this.fb.group({\n      password: ['', [Validators.required, Validators.pattern(/(?=^.{8,}$)(?=.*\\d)(?=.*[!@#$%^&*]+)(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/)]],\n      confirm_password: ['', [Validators.required]]\n      },\n      { validators: this.MustMatch('password', 'confirm_password') }\n    );\n    const userdetails = JSON.parse(localStorage.getItem('userdetails') || '');\n    this.isSuperAdmin = userdetails?.roles.id == 11;\n  }\n\n  ngOnInit(): void {\n    var checkPage = this.pageService.getPageDetail();\n    if (checkPage)\n      this.page = checkPage;\n    this.retrieveAdminRoles();\n    this.crud.getRequest(`${requestUrl.getAdminRolesAndPermission}`).then((res: any) => {\n      if (res)\n        this.roleList = res.data.results;\n      this.sort(this.roleList,'name')\n    });\n  }\n  sort(array: any, key: any) {\n    return array.sort((a: any, b: any) => {\n      var nameA = a[key].toUpperCase();\n      var nameB = b[key].toUpperCase();\n      if (nameA < nameB) {\n        return -1;\n      }\n      if (nameA > nameB) {\n        return 1;\n      }\n      return 0;\n    });\n  }\n  savePageDetail() {\n    this.pageService.savePageDetail(window.location.href, this.page);\n  }\n  getRequestParams(searchTitle: string, page: number, pageSize: number, user_type: any): any {\n    let params: any = {};\n    if (searchTitle) {\n      params[`search`] = searchTitle;\n    }\n    if (page) {\n      params[`page`] = page;\n    }\n    if (pageSize) {\n      params[`page_size`] = pageSize;\n    }\n    if (user_type) {\n      params[`roles`] = user_type;\n    }\n    return params;\n  }\n\n  retrieveAdminRoles(searchKeywords?:string):void  {\n    if(searchKeywords || searchKeywords === '') {\n      this.title = searchKeywords;\n    }\n    \n    const params = this.getRequestParams(this.title, this.page, this.pageSize, this.user_type);\n\n    if(this.sortField) {\n      params.field = this.sortField;\n      params.order_in = this.sortOrder;\n    }\n    this._roleservice.getRoles(params)\n    .subscribe((res: any) => {\n      this.payments = res.data.results;\n      this.showError = this.payments.length == 0 ? true : false;\n      this.totalPayment = res.data.count;\n      },\n      (err: any) => {\n      }\n    )\n  }\n\n  getAdminRolesOnFilter(field: any, type: any) {\n    this.sortField = field;\n    this.sortOrder = type;\n    this.retrieveAdminRoles();\n  }\n\n  handlePageChange(event: number): void {\n    this.page = event;\n    this.retrieveAdminRoles();\n  }\n\n  onKeyUp(x: any) {\n    this.title = x;\n    this.page = 1;\n    this.retrieveAdminRoles();\n  }\n\n  roleChange(event: any) {\n    this.user_type = event.target.value;\n    this.page = 1;\n    this.retrieveAdminRoles();\n  }\n  delete() {\n    this.crud.deleteRequest(`${requestUrl.deleteUser}${this.selectedUser.user_id}`).then((res: any) => {\n      if (res) {\n        this.title = '';\n        this.toastr.success(res.message);\n        this.retrieveAdminRoles();\n      }\n    })\n  }\n\n  MustMatch(controlName: string, matchingControlName: string) {\n    return (formGroup: FormGroup) => {\n      const control = formGroup.controls[controlName];\n      const matchingControl = formGroup.controls[matchingControlName];\n      if (matchingControl.errors && !matchingControl.errors['MustMatch']) {\n        return;\n      }\n      if (control.value !== matchingControl.value) {\n        matchingControl.setErrors({ MustMatch: true });\n      } else {\n        matchingControl.setErrors(null);\n      }\n    }\n  }\n\n  resetPasswordFormSubmit() {\n    if (!this.resetPasswordForm.valid) {\n      this.markAllControlsAsTouched(this.resetPasswordForm);\n      return;\n    }\n    this.resetPasswordForm.patchValue({ 'email': this.email });\n    let data = {\n      \"email\": this.email,\n      \"password\": encryption(this.resetPasswordForm.value.password),\n      \"confirm_password\": encryption(this.resetPasswordForm.value.confirm_password),\n      \"is_hard_reset\":true\n    };\n    const closeBtn:HTMLButtonElement | null = document.querySelector('#closemodal');\n    if(closeBtn) closeBtn.click();\n    console.log(data);\n    \n    this._authservice.resetPassword(data)\n    .subscribe(\n      (res: any) => {\n        this.resetPasswordForm.reset()\n        this.toastr.success(res.message, '', { timeOut: 4000 })\n      },\n      (err: any) => this.toastr.error(err.error.detail, '', { timeOut: 2000 }),\n    )\n  }\n\n  markAllControlsAsTouched(formGroup: FormGroup) {\n    Object.values(formGroup.controls).forEach(control => {\n      control.markAsTouched();\n      if (control instanceof FormGroup) {\n        this.markAllControlsAsTouched(control);\n      }\n    });\n  }\n\n  get form() {\n    return this.resetPasswordForm.controls;\n  }\n}","import { Component, OnInit } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoleService } from '../../services/role.service';\nimport { CrudService } from 'src/app/services/crud.service';\nimport { requestUrl } from 'src/app/services/adminReqUrl.const';\n\n@Component({\n  selector: 'app-view-userdetail',\n  templateUrl: './view-userdetail.component.html',\n  styleUrls: ['./view-userdetail.component.scss']\n})\nexport class ViewUserdetailComponent implements OnInit {\n\n  user_id: any;\n  userdata: any = '';\n  role: any = '';\n\n  userdetailForm: FormGroup;\n  constructor(\n    private _titleservice: Title,\n    private router: Router,\n    private route: ActivatedRoute,\n    private _roleservice: RoleService,\n    private fb: FormBuilder,\n    private crud: CrudService) {\n    this._titleservice.setTitle('View-UserDetails');\n    this.userdetailForm = this.fb.group({\n      first_name: [''],\n      last_name: [''],\n      user_type: [''],\n      email: ['',],\n      description: ['']\n    });\n  }\n\n  ngOnInit(): void {\n    this.user_id = this.route.snapshot.paramMap.get('id');\n    this.getUserDetail();\n  }\n  getUserDetail() {\n    this.crud.getRequest(`${requestUrl.getAdminRoleById}${this.user_id}/`).then((res: any) => {\n      if (res) {\n        this.userdata = res;\n        let userdetail = {\n          \"first_name\": res.first_name,\n          \"last_name\": res.last_name,\n          \"user_type\": res.roles.name,\n          \"email\": res.email,\n          \"description\": res.description,\n        };\n        this.userdetailForm.patchValue(userdetail);\n      }\n    });\n  }\n}","<section class=\"add-user\">\n  <ul class=\"breadcrumb\">\n    <li class=\"breadcrumb-item\"><a routerLink=\"/admin\">Home</a></li>\n    <li class=\"breadcrumb-item\"><a routerLink=\"/admin/role\">User Management</a></li>\n    <li class=\"breadcrumb-item\"><a routerLink=\"/admin/role\" routerLinkActive=\"active\"> View User</a></li>\n  </ul>\n  <div class=\"add-user-inner\">\n    <div class=\"d-flex justify-content-between align-items-center\">\n      <h2> User Details </h2>\n      <button class=\"backBtn\" routerLink=\"/admin/role\">\n        <i class=\"fa fa-long-arrow-left\" aria-hidden=\"true\"></i>\n      </button>\n    </div>\n    <div class=\"viewProfile\">\n      <div class=\"profile-info\">\n        <div class=\"upload-pic\">\n          <img [src]=\"userdata.image || 'assets/images/icon/avtarIcon.jpeg'\" alt=\"upload pic\" />\n        </div>\n      </div>\n      <div class=\"formFields\">\n        <form [formGroup]=\"userdetailForm\">\n          <div>\n            <label for=\"first_name\" class=\"form-label\">First Name </label>\n            <input type=\"text\" formControlName=\"first_name\" class=\"form-control readonly\" readonly>\n          </div>\n          <div>\n            <label for=\"lname\" class=\"form-label\">Last Name </label>\n            <input type=\"text\" formControlName=\"last_name\" class=\"form-control readonly\" readonly>\n          </div>\n          <div>\n            <label for=\"email\" class=\"form-label\">Email </label>\n            <input type=\"text\" formControlName=\"email\" class=\"form-control readonly\" readonly>\n          </div>\n          <div>\n            <label for=\"role\" class=\"form-label\">Role Type </label>\n            <input type=\"text\" formControlName=\"user_type\" class=\"form-control readonly\" readonly>\n          </div>\n          <div class=\"des\">\n            <label for=\"des\" class=\"form-label\"> Description : </label>\n            <textarea class=\"form-control readonly\" formControlName=\"description\" readonly></textarea>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</section>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { RoleManagementRoutingModule } from './role-management-routing.module';\nimport { RoleManagementComponent } from './role-management.component';\nimport { UserListComponent } from './user-list/user-list.component';\nimport { CreateUserComponent } from './create-user/create-user.component';\nimport { UpdateUserComponent } from './update-user/update-user.component';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { FormsModule , ReactiveFormsModule } from '@angular/forms';\nimport { ViewUserdetailComponent } from './view-userdetail/view-userdetail.component';\nimport { SharedComponentsModule } from 'src/app/shared-components/shared-components.module';\n\n@NgModule({\n  declarations: [\n    RoleManagementComponent,\n    UserListComponent,\n    CreateUserComponent,\n    UpdateUserComponent,\n    ViewUserdetailComponent\n  ],\n  imports: [\n    CommonModule,\n    RoleManagementRoutingModule,\n    NgxPaginationModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SharedComponentsModule\n  ]\n})\nexport class RoleManagementModule { }\n"],"x_google_ignoreList":[]}