{"version":3,"file":"826.1604828a6293528d.js","mappings":"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","names":["i0","route","path","component","RegisterComponent","constructor","fb","_titleservice","router","toastr","_registerservice","this","require","environment","countryDetails","alpha2","name","setTitle","individualForm","group","first_name","Validators","last_name","phone_no","country_code","email","address","address_2","country","state","city","zip","captcha_response","businessForm","bussness_name","tax_number","company_number","ngOnInit","countryData","sort","a","b","obj","forEach","element","moveCountryOnTop","getProducts","subscribe","res","products","data","results","err","index","findIndex","item","removedObject","splice","unshift","acceptCond","acceptCondCount","acceptTermIndi","acceptTermCond","acceptTermCondCount","acceptTermBusi","individualFormFormSubmit","individualData","value","valid","individualRegister","individual_profile","product_name","tool_serial_number","individual","success","message","timeOut","navigate","error","detail","markAllControlsAsTouched","formGroup","Object","values","controls","control","markAsTouched","FormGroup","businessFormSubmit","businessFormSubmitted","invalid","businessData","businessRegister","business_profile","win_ols_license_number","business","setCountryCode","event","form","patchValue","dialCode","formTypeChange","type","formType","markAsUntouched","static","core","selectors","ctx","RegisterModule","CommonModule","ReactiveFormsModule","NgxCaptchaModule","NgSelectModule","Ng2TelInputModule","RouterModule"],"sourceRoot":"webpack:///","sources":["./src/app/auth/register/register.component.html","./src/app/auth/register/register.module.ts","./src/app/auth/register/register.component.ts"],"sourcesContent":["<div class=\"container-fluid \">\n    <div class=\"row inner-box\">\n        <div class=\"col-sm-5 p-0 mob-left\">\n            <div>\n                <img class=\"registerimg\" src=\"assets/images/register.png\" alt=\"register\">\n            </div>\n        </div>\n        <div class=\"col-sm-7 mob-right\">\n            <div class=\"register-box\">\n                <div class=\"register-box-inner\">\n                    <h2>Register</h2>\n                    <p>Use the form below to register for an account</p>\n                    <div class=\"mb-3 mt-3\">\n                        <label for=\"account-type\" class=\"form-label account_type\">Account Type</label>\n                        <div class=\"flex trade\">\n                            <div>\n                                <label title=\"(Trade Customer)\">\n                                    <input class=\"form-check-input mt-0 me-3\" type=\"radio\" (click)=\"formTypeChange('business')\"\n                                        checked name=\"type\">\n                                    <span>Business</span> <span class=\"dark-gray\"> (Trade Customer)</span>\n                                </label>\n                            </div>\n                            <div>\n                                <label title=\"(Retail Customer)\">\n                                    <input class=\"form-check-input mt-0 me-3\" type=\"radio\" (click)=\"formTypeChange('individual')\"\n                                        name=\"type\"> \n                                    <span>Individual</span> <span class=\"dark-gray\"> (Retail Customer)</span>\n                                </label>\n                            </div>\n                        </div>\n                    </div>\n                    <form [formGroup]=\"individualForm\" *ngIf=\"formType\" (ngSubmit)=\"individualFormFormSubmit()\">\n                        <div class=\"flex\">\n                            <ng-container *ngTemplateOutlet=\"textField;context:{form:individualForm,name:'First Name',control:'first_name'}\"></ng-container>\n                            <ng-container *ngTemplateOutlet=\"textField;context:{form:individualForm,name:'Last Name',control:'last_name'}\"></ng-container>\n                        </div>\n                        <div>\n                            <ng-container *ngTemplateOutlet=\"textField;context:{form:individualForm,name:'Email',control:'email'}\"></ng-container>\n                        </div>\n                        <div class=\"flex alignLeft\">\n                            <ng-container *ngTemplateOutlet=\"textField;context:{form:individualForm,name:'Address Line 1',control:'address',isAddress:true}\"></ng-container>\n                            <ng-container *ngTemplateOutlet=\"textField;context:{form:individualForm,name:'Address Line 2',control:'address_2',isAddress:true}\"></ng-container>\n                        </div>\n                        <div class=\"flex\">\n                            <ng-container *ngTemplateOutlet=\"textField;context:{form:individualForm,name:'City',control:'city'}\"></ng-container>\n                            <ng-container *ngTemplateOutlet=\"textField;context:{form:individualForm,name:'State',control:'state'}\"></ng-container>\n\n                            <div class=\"country-handle\">\n                                <label for=\"country\" class=\"form-label\">Country</label>\n                                <div>\n                                    <ng-select class=\"country_select\" formControlName=\"country\">\n                                        <ng-option selected disabled>Select your country</ng-option>\n                                        <ng-option *ngFor=\"let country of countryData\" [value]=\"country.country\">\n                                            {{country.country}} <img width=\"20px\" [src]=\"country.flag\" alt=\"\">\n                                        </ng-option>\n                                    </ng-select>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"flex\">\n                            <ng-container *ngTemplateOutlet=\"textField;context:{form:individualForm,name:'Zip / Postcode',control:'zip'}\"></ng-container>\n                            <ng-container *ngTemplateOutlet=\"phone;context:{$implicit:individualForm}\"></ng-container>\n                        </div>\n                        \n                        <div class=\"captcha\">\n                            <ngx-recaptcha2 #captchaElem [siteKey]=\"siteKey\" formControlName=\"captcha_response\">\n                            </ngx-recaptcha2>\n                            <small class=\"text-danger\"\n                                *ngIf=\"individualForm.controls['captcha_response'].touched && individualForm.controls['captcha_response'].hasError('required')\">\n                                Invalid Captcha.\n                            </small>\n                        </div>\n                        <div class=\"text-center termcondition\">\n                            <div>\n                                <input type=\"checkbox\" (click)=\"acceptCond()\" />\n                                <p>By clicking Register, you agree to our <a routerLink=\"/terms-and-conditions\"\n                                        target=\"_blank\">Terms & Conditions </a> and <a target=\"_blank\"\n                                        routerLink=\"/privacy\">Privacy Policy.</a></p>\n                            </div>\n                            <small class=\"text-danger\" *ngIf=\"!acceptTermIndi && (acceptCondCount >0)\">\n                                Please select terms & conditions.\n                            </small>\n                        </div>\n                        <div class=\"d-grid\" style=\"cursor: pointer;\">\n                            <button type=\"submit\" class=\"btn btn-primary btn-block lbtn\"\n                                style=\"background-color:#00C0F2;\">Register</button>\n                        </div>\n                        <div class=\"text-center reg\">\n                            <span>Have an account? </span><a style=\"color:#00C0F2;\" routerLink=\"/auth/login\">Login</a>\n                        </div>\n                    </form>\n\n\n                    \n                    <form [formGroup]=\"businessForm\" *ngIf=\"!formType\" (ngSubmit)=\"businessFormSubmit()\">\n                        <div class=\"flex\">\n                            <ng-container *ngTemplateOutlet=\"textField;context:{form:businessForm,name:'Business Name',control:'bussness_name'}\"></ng-container>\n                            <ng-container *ngTemplateOutlet=\"textField;context:{form:businessForm,name:'Contact First Name',control:'first_name'}\"></ng-container>\n                        </div>\n\n                        <div class=\"flex\">\n                            <ng-container *ngTemplateOutlet=\"textField;context:{form:businessForm,name:'Contact Last Name',control:'last_name'}\"></ng-container>\n                            <ng-container *ngTemplateOutlet=\"textField;context:{form:businessForm,name:'Contact Email',control:'email'}\"></ng-container>\n                        </div>\n                        \n                        <div class=\"flex alignLeft\">\n                            <ng-container *ngTemplateOutlet=\"textField;context:{form:businessForm,name:'Address Line 1',control:'address',isAddress:true}\"></ng-container>\n                            <ng-container *ngTemplateOutlet=\"textField;context:{form:businessForm,name:'Address Line 2',control:'address_2',isAddress:true}\"></ng-container>\n                        </div>\n                        <div class=\"flex\">\n                            <ng-container *ngTemplateOutlet=\"textField;context:{form:businessForm,name:'City',control:'city'}\"></ng-container>\n                            <ng-container *ngTemplateOutlet=\"textField;context:{form:businessForm,name:'State',control:'state'}\"></ng-container>\n\n                            <div class=\"country-handle\">\n                                <label for=\"country\" class=\"form-label\">Country</label>\n                                <div>\n                                    <ng-select class=\"form-control\" formControlName=\"country\">\n                                        <ng-option selected disabled>Select your country</ng-option>\n                                        <ng-option *ngFor=\"let country of countryData\" [value]=\"country.country\">\n                                            {{country.country}} <img width=\"20px\" [src]=\"country.flag\" alt=\"\">\n                                        </ng-option>\n                                    </ng-select>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"flex\">\n                            <ng-container *ngTemplateOutlet=\"textField;context:{form:businessForm,name:'Zip / Postcode',control:'zip'}\"></ng-container>\n                            <ng-container *ngTemplateOutlet=\"phone;context:{$implicit:businessForm}\"></ng-container>\n                        </div>\n                        <div class=\"flex\">\n                            <ng-container *ngTemplateOutlet=\"textField;context:{form:businessForm,name:'Tax number',control:'tax_number'}\"></ng-container>\n                            <ng-container *ngTemplateOutlet=\"textField;context:{form:businessForm,name:'Company number',control:'company_number'}\"></ng-container>\n                        </div>\n\n                        <div class=\"captcha\">\n                            <ngx-recaptcha2 #captchaElem [siteKey]=\"siteKey\" formControlName=\"captcha_response\">\n                            </ngx-recaptcha2>\n                            <small class=\"text-danger\"\n                                *ngIf=\"businessForm.controls['captcha_response'].touched && businessForm.controls['captcha_response'].hasError('required')\">\n                                Invalid Captcha.\n                            </small>\n                        </div>\n\n                        <div class=\"text-center termcondition\">\n                            <div>\n                                <input type=\"checkbox\" (click)=\"acceptTermCond()\" />\n                                <p>By clicking Register, you agree to our <a routerLink=\"/terms-and-conditions\"\n                                        target=\"_blank\">Terms & Conditions </a> and <a target=\"_blank\"\n                                        routerLink=\"/privacy\">Privacy Policy.</a></p>\n                            </div>\n                            <small class=\"text-danger\" *ngIf=\"!acceptTermBusi && (acceptTermCondCount >0)\">\n                                Please select terms & conditions.\n                            </small>\n                        </div>\n                        <div class=\"d-grid\" style=\"cursor: pointer;\">\n                            <button type=\"submit\" class=\"btn btn-primary btn-block lbtn\">Register</button>\n                        </div>\n                        <div class=\"text-center reg\">\n                            <span>Have an account? </span><a routerLink=\"/auth/login\">Login</a>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<ng-template #textField let-form=\"form\" let-control=\"control\" let-name=\"name\" let-isAddress=\"isAddress\">\n    <div [formGroup]=\"form\">\n\n        <label for=\"pincode\" class=\"form-label\">{{name}}</label>\n        \n        <input\n            *ngIf=\"!isAddress\"\n            class=\"form-control\" \n            type=\"text\" \n            [formControlName]=\"control\"\n            [class.is-invalid]=\"form.controls[control].invalid && form.controls[control].touched\"\n            [placeholder]=\"name\">\n\n        <textarea\n            *ngIf=\"isAddress\"\n            class=\"form-control\" \n            type=\"text\" \n            [formControlName]=\"control\"\n            [class.is-invalid]=\"form.controls[control].invalid && form.controls[control].touched\"\n            [placeholder]=\"name\">\n        </textarea>\n\n\n        <small \n            class=\"text-danger\"\n            *ngIf=\"control === 'email' && form.controls['email'].touched && form.controls['email'].hasError('email')\">\n            Please enter valid email.\n        </small>\n\n        <small class=\"text-danger\"\n            *ngIf=\"form.controls[control].touched && form.controls[control].hasError('required')\">\n            Please enter {{name}}.\n        </small>\n    </div>\n</ng-template>\n\n\n<ng-template #phone let-form>\n    <div [formGroup]=\"form\">\n        <label for=\"phone\" class=\"form-label\">Phone</label>\n        <input class=\"form-control\" type=\"tel\" formControlName=\"phone_no\"\n            [class.is-invalid]=\"form.controls['phone_no'].invalid && form.controls['phone_no'].touched\"\n            pattern=\"^\\+?\\d*$\"\n            placeholder=\" \" ng2TelInput \n            [ng2TelInputOptions]=\"{separateDialCode:true,initialCountry:'GB'}\"\n            (countryChange)=\"setCountryCode($event, form)\"\n            >\n        <small class=\"text-danger\" *ngIf=\"form.controls['phone_no'].touched && form.controls['phone_no'].hasError('pattern')\">\n            Invalid phone number.\n        </small>\n        <small class=\"text-danger\"\n            *ngIf=\"form.controls['phone_no'].touched && form.controls['phone_no'].hasError('required')\">\n            Please enter phone number.\n        </small>\n    </div>\n</ng-template>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RegisterComponent } from './register.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\nimport { NgxCaptchaModule } from 'ngx-captcha';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { Ng2TelInputModule } from 'ng2-tel-input';\n\nconst route:Routes = [\n  {\n    path:'',\n    component: RegisterComponent\n  }\n]\n\n@NgModule({\n  declarations: [RegisterComponent],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgxCaptchaModule,\n    NgSelectModule,\n    Ng2TelInputModule,\n    RouterModule.forChild(route)\n  ]\n})\nexport class RegisterModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Title } from '@angular/platform-browser';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { RegisterService } from '../services/register.service';\nimport { environment } from 'src/environments/environment';\nimport { countryDetails } from 'src/app/global-files/global.const';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n  products: any;\n  formType: boolean = false;\n  addphoneindividualerror: boolean = true;\n  businessForm: FormGroup;\n  individualForm: FormGroup;\n  businessFormSubmitted: boolean = false;\n  addphoneerror: boolean = true;\n  countries = require('country-data-list').countries;\n  siteKey: string = environment.captchaSecrateKey;\n  acceptTermIndi: boolean = false;\n  acceptTermBusi: boolean = false;\n  countryData = countryDetails\n  constructor(private fb: FormBuilder, private _titleservice: Title,\n    private router: Router, private route: ActivatedRoute,\n    private toastr: ToastrService, private _registerservice: RegisterService) {\n    this._titleservice.setTitle('Register | Viezu');\n    this.individualForm = this.fb.group({\n      first_name: ['', [Validators.required]],\n      last_name: ['', [Validators.required]],\n      phone_no: ['', [Validators.required]],\n      country_code: ['44', ],\n      email: ['', [Validators.required, Validators.email]],\n      address: ['', [Validators.required]],\n      address_2: [''],\n      country: ['United Kingdom', [Validators.required]],\n      state: ['', [Validators.required]],\n      city: ['', [Validators.required]],\n      zip: ['', [Validators.required]],\n      captcha_response: ['', [Validators.required]]\n    });\n    this.businessForm = this.fb.group({\n      bussness_name: ['', [Validators.required]],\n      tax_number: [''],\n      company_number: [''],\n      address: ['', [Validators.required]],\n      address_2: [''],\n      country: ['United Kingdom', [Validators.required]],\n      state: ['', [Validators.required]],\n      city: ['', [Validators.required]],\n      zip: ['', [Validators.required]],\n      first_name: ['', [Validators.required]],\n      last_name: ['', [Validators.required]],\n      phone_no: ['', [Validators.required]],\n      country_code:['44'],\n      email: ['', [Validators.required, Validators.email]],\n      captcha_response: ['', [Validators.required]]\n    });\n  }\n  obj: any = [\n    { \"alpha2\": \"US\", \"name\": \"United States\", },\n    { \"alpha2\": \"GB\", \"name\": \"United Kingdom\", }\n  ]\n\n  ngOnInit(): void {\n    this.countryData.sort((a: any, b: any) => (a.country > b.country) ? 1 : -1)\n    \n    this.obj.forEach((element: any) => {\n      this.moveCountryOnTop(element.name);\n    });\n    this._registerservice.getProducts().subscribe((res: any) => {\n      this.products = res.data.results;\n    },\n      (err: any) => {\n      });\n  }\n\n\n  moveCountryOnTop(name: string) {\n    const index = this.countryData.findIndex((item: any) => item.country === name);\n    if (index !== -1) {\n      const removedObject = this.countryData.splice(index, 1)[0];\n      this.countryData.unshift(removedObject);\n    }\n  }\n\n\n  acceptCondCount: number = 0;\n  acceptCond() {\n    this.acceptCondCount = this.acceptCondCount + 1;\n    this.acceptTermIndi = !this.acceptTermIndi\n\n  }\n  acceptTermCondCount: number = 0;\n  acceptTermCond() {\n    this.acceptTermCondCount = this.acceptTermCondCount + 1;\n    this.acceptTermBusi = !this.acceptTermBusi\n  }\n\n  individualFormFormSubmit() {\n    let individualData = this.individualForm.value;\n    if (this.individualForm.valid && this.acceptTermIndi) {\n      let data = {\n        \"individual_profile\": {\n          \"product_name\": individualData.product_name,\n          \"tool_serial_number\": individualData.tool_serial_number\n        },\n        \"address\": {\n          \"address\": individualData.address,\n          \"country\": individualData.country,\n          \"state\": individualData.state,\n          \"city\": individualData.city,\n          \"zip\": individualData.zip\n        },\n        \"individual\": {\n          \"first_name\": individualData.first_name,\n          \"last_name\": individualData.last_name,\n          \"phone_no\": individualData.phone_no,\n          \"country_code\": individualData.country_code,\n          \"email\": individualData.email\n        },\n        \"captcha_response\": individualData.captcha_response\n      };\n      this._registerservice.individualRegister(data).subscribe((res: any) => {\n        this.toastr.success(res.message, '', { timeOut: 4000 });\n        this.router.navigate(['/auth/login']);\n      },\n        (err: any) => {\n          this.toastr.error(err.error.detail, '', { timeOut: 4000 });\n        });\n    } else {\n      this.acceptCondCount = this.acceptCondCount + 1;\n      this.markAllControlsAsTouched(this.individualForm);\n    }\n  }\n  markAllControlsAsTouched(formGroup: FormGroup) {\n    Object.values(formGroup.controls).forEach(control => {\n      control.markAsTouched();\n\n      if (control instanceof FormGroup) {\n        this.markAllControlsAsTouched(control);\n      }\n    });\n  }\n\n  businessFormSubmit() {\n    if (this.businessForm.valid && this.acceptTermBusi) {\n      this.businessFormSubmitted = true;\n      if (this.businessForm.invalid) { return; }\n      let businessData = this.businessForm.value;\n      let data = {\n        \"business_profile\": {\n          \"bussness_name\": businessData.bussness_name,\n          \"tax_number\": businessData.tax_number,\n          \"company_number\": businessData.company_number,\n          \"win_ols_license_number\": businessData.win_ols_license_number\n        },\n        \"address\": {\n          \"address\": businessData.address,\n          \"country\": businessData.country,\n          \"state\": businessData.state,\n          \"city\": businessData.city,\n          \"zip\": businessData.zip\n        },\n        \"business\": {\n          \"first_name\": businessData.first_name,\n          \"last_name\": businessData.last_name,\n          \"phone_no\": businessData.phone_no,\n          \"country_code\": businessData.country_code,\n          \"email\": businessData.email\n        },\n        \"captcha_response\": businessData.captcha_response\n      };\n      this._registerservice.businessRegister(data).subscribe((res: any) => {\n        this.toastr.success(res.message, '', { timeOut: 4000 });\n        this.router.navigate(['/auth/login']);\n      },\n        (err: any) => {\n          this.toastr.error(err.error.detail, '', { timeOut: 4000 });\n        });\n    }\n    else {\n      this.acceptTermCondCount = this.acceptTermCondCount + 1;\n      this.markAllControlsAsTouched(this.businessForm);\n    }\n  }\n\n  setCountryCode(event:any,form:FormGroup) {\n    form.patchValue({ 'country_code': event.dialCode });\n  }\n\n\n  formTypeChange(type: any) {\n    this.formType = (type == 'individual');\n    this.individualForm.markAsUntouched();\n    this.businessForm.markAsUntouched();\n  }\n}"],"x_google_ignoreList":[]}