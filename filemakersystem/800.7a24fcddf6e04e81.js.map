{"version":3,"file":"800.7a24fcddf6e04e81.js","mappings":"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","names":["RegisterService","constructor","_http","this","environment","businessRegister","data","post","baseUrl","individualRegister","getProducts","get","static","_angular_core__WEBPACK_IMPORTED_MODULE_1__","factory","ScriptService","zone","scriptElemId","windowGrecaptcha","windowGrecaptchaEnterprise","windowOnLoadCallbackProperty","windowOnLoadEnterpriseCallbackProperty","globalDomain","defaultDomain","enterpriseApi","defaultApi","registerCaptchaScript","config","render","onLoad","language","grecaptchaScriptLoaded","useEnterprise","run","window","getCallbackName","bind","scriptElem","document","createElement","id","innerHTML","src","getCaptchaScriptUrl","async","defer","getElementsByTagName","appendChild","cleanup","elem","getElementById","remove","undefined","execute","getLanguageParam","hl","useGlobalDomain","ɵfac","i0","ɵprov","BaseReCaptchaComponentDirective","renderer","injector","scriptService","captchaElemPrefix","setupCaptcha","type","tabIndex","success","EventEmitter","load","reset","ready","error","expire","setupAfterLoad","resetCaptchaAfterSuccess","onChange","val","onTouched","isLoaded","ngAfterViewInit","control","NgControl","InjectFlags","ngAfterViewChecked","setupComponent","ngOnChanges","changes","firstChange","currentValue","previousValue","getResponse","reCaptchaApi","captchaId","getCaptchaId","resetCaptcha","next","getCurrentResponse","currentResponse","reloadCaptcha","ensureCaptchaElem","captchaElemId","captchaElem","Error","renderReCaptcha","runOutsideAngular","setTimeout","getCaptchaProperties","handleCallback","callback","getPseudoUniqueNumber","Date","getUTCMilliseconds","Math","floor","random","captchaSpecificSetup","createAndSetCaptchaElem","grecaptcha","onloadCallback","grecapcha","generateNewElemId","captchaWrapperElem","nativeElement","newElem","writeValue","obj","registerOnChange","fn","registerOnTouched","handleErrorCallback","handleExpireCallback","ɵdir","inputs","ReCaptchaType","InvisibleReCaptcha","ReCaptcha2","ReCaptcha2Component","super","windowOnErrorCallbackProperty","windowOnExpireCallbackProperty","theme","size","recaptchaType","ngOnDestroy","registerCallbacks","sitekey","siteKey","response","tabindex","ɵcmp","selectors","_c0","_t","ctx","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","decls","ReCaptchaV3Service","action","errorCallback","executeAsPromise","then","catch","console","Promise","resolve","reject","token","NgxCaptchaModule","ɵmod","ɵinj","imports","CommonModule"],"sourceRoot":"webpack:///","sources":["./src/app/auth/services/register.service.ts","./node_modules/ngx-captcha/fesm2020/ngx-captcha.mjs"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegisterService {\n\n  baseUrl = environment.baseUrl;\n  constructor(private _http:HttpClient)\n  {\n\n\n  }\n\n  businessRegister(data:any)\n  {\n    return this._http.post(this.baseUrl+'/api/v1/account/business-register/',data);\n  }\n\n  individualRegister(data:any)\n  {\n    return this._http.post(this.baseUrl+'/api/v1/account/individual-register/',data);\n  }\n\n  getProducts()\n  {\n    return this._http.get(this.baseUrl+'/api/v1/admin/product');\n  }\n\n}\n","import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, InjectFlags, Directive, Input, Output, forwardRef, Component, ViewChild, NgModule } from '@angular/core';\nimport { NgControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nclass ScriptService {\r\n    constructor(zone) {\r\n        this.zone = zone;\r\n        this.scriptElemId = \"ngx-catpcha-script\";\r\n        /**\r\n         * Name of the global google recaptcha script\r\n         */\r\n        this.windowGrecaptcha = \"grecaptcha\";\r\n        /**\r\n         * Name of enterpise property in the global google recaptcha script\r\n         */\r\n        this.windowGrecaptchaEnterprise = \"enterprise\";\r\n        /**\r\n         * Name of the global callback\r\n         */\r\n        this.windowOnLoadCallbackProperty = \"ngx_captcha_onload_callback\";\r\n        /**\r\n         * Name of the global callback for enterprise\r\n         */\r\n        this.windowOnLoadEnterpriseCallbackProperty = \"ngx_captcha_onload_enterprise_callback\";\r\n        this.globalDomain = \"recaptcha.net\";\r\n        this.defaultDomain = \"google.com\";\r\n        this.enterpriseApi = \"enterprise.js\";\r\n        this.defaultApi = \"api.js\";\r\n    }\r\n    registerCaptchaScript(config, render, onLoad, language) {\r\n        if (this.grecaptchaScriptLoaded(config.useEnterprise)) {\r\n            // recaptcha script is already loaded\r\n            // just call the callback\r\n            if (config.useEnterprise) {\r\n                this.zone.run(() => {\r\n                    onLoad(window[this.windowGrecaptcha][this.windowGrecaptchaEnterprise]);\r\n                });\r\n            }\r\n            else {\r\n                this.zone.run(() => {\r\n                    onLoad(window[this.windowGrecaptcha]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n        // we need to patch the callback through global variable, otherwise callback is not accessible\r\n        // note: https://github.com/Enngage/ngx-captcha/issues/2\r\n        if (config.useEnterprise) {\r\n            window[this.getCallbackName(true)] = ((() => this.zone.run(onLoad.bind(this, window[this.windowGrecaptcha][this.windowGrecaptchaEnterprise]))));\r\n        }\r\n        else {\r\n            window[this.getCallbackName(false)] = ((() => this.zone.run(onLoad.bind(this, window[this.windowGrecaptcha]))));\r\n        }\r\n        // prepare script elem\r\n        const scriptElem = document.createElement(\"script\");\r\n        scriptElem.id = this.scriptElemId;\r\n        scriptElem.innerHTML = \"\";\r\n        scriptElem.src = this.getCaptchaScriptUrl(config, render, language);\r\n        scriptElem.async = true;\r\n        scriptElem.defer = true;\r\n        // add script to header\r\n        document.getElementsByTagName(\"head\")[0].appendChild(scriptElem);\r\n    }\r\n    cleanup() {\r\n        const elem = document.getElementById(this.scriptElemId);\r\n        if (elem) {\r\n            elem.remove();\r\n        }\r\n        window[this.getCallbackName()] = undefined;\r\n        window[this.windowGrecaptcha] = undefined;\r\n    }\r\n    /**\r\n     * Indicates if google recaptcha script is available and ready to be used\r\n     */\r\n    grecaptchaScriptLoaded(useEnterprise) {\r\n        if (!window[this.getCallbackName(useEnterprise)] ||\r\n            !window[this.windowGrecaptcha]) {\r\n            return false;\r\n        }\r\n        else if (useEnterprise &&\r\n            window[this.windowGrecaptcha][this.windowGrecaptchaEnterprise]) {\r\n            return true;\r\n            // if only enterprise script is loaded we need to check some v3's method\r\n        }\r\n        else if (window[this.windowGrecaptcha].execute) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Gets global callback name\r\n     * @param useEnterprise Optional flag for enterprise script\r\n     * @private\r\n     */\r\n    getCallbackName(useEnterprise) {\r\n        return useEnterprise\r\n            ? this.windowOnLoadEnterpriseCallbackProperty\r\n            : this.windowOnLoadCallbackProperty;\r\n    }\r\n    /**\r\n     * Gets language param used in script url\r\n     */\r\n    getLanguageParam(hl) {\r\n        if (!hl) {\r\n            return \"\";\r\n        }\r\n        return `&hl=${hl}`;\r\n    }\r\n    /**\r\n     * Url to google api script\r\n     */\r\n    getCaptchaScriptUrl(config, render, language) {\r\n        const domain = config.useGlobalDomain\r\n            ? this.globalDomain\r\n            : this.defaultDomain;\r\n        const api = config.useEnterprise ? this.enterpriseApi : this.defaultApi;\r\n        const callback = this.getCallbackName(config.useEnterprise);\r\n        return `https://www.${domain}/recaptcha/${api}?onload=${callback}&render=${render}${this.getLanguageParam(language)}`;\r\n    }\r\n}\r\n/** @nocollapse */ ScriptService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ScriptService, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\r\n/** @nocollapse */ ScriptService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ScriptService, providedIn: \"root\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ScriptService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: \"root\",\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.NgZone }]; } });\n\nclass BaseReCaptchaComponentDirective {\r\n    constructor(renderer, zone, injector, scriptService) {\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.injector = injector;\r\n        this.scriptService = scriptService;\r\n        /**\r\n         * Prefix of the captcha element\r\n         */\r\n        this.captchaElemPrefix = \"ngx_captcha_id_\";\r\n        this.setupCaptcha = true;\r\n        /**\r\n         * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\r\n         */\r\n        this.useGlobalDomain = false;\r\n        this.useEnterprise = false;\r\n        /**\r\n         * Type\r\n         */\r\n        this.type = \"image\";\r\n        /**\r\n         * Tab index\r\n         */\r\n        this.tabIndex = 0;\r\n        /**\r\n         * Called when captcha receives successful response.\r\n         * Captcha response token is passed to event.\r\n         */\r\n        this.success = new EventEmitter();\r\n        /**\r\n         * Called when captcha is loaded. Event receives id of the captcha\r\n         */\r\n        this.load = new EventEmitter();\r\n        /**\r\n         * Called when captcha is reset.\r\n         */\r\n        this.reset = new EventEmitter();\r\n        /**\r\n         * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\r\n         */\r\n        this.ready = new EventEmitter();\r\n        /**\r\n         * Error callback\r\n         */\r\n        this.error = new EventEmitter();\r\n        /**\r\n         * Expired callback\r\n         */\r\n        this.expire = new EventEmitter();\r\n        /**\r\n         * Indicates if captcha should be set on load\r\n         */\r\n        this.setupAfterLoad = false;\r\n        /**\r\n         * If enabled, captcha will reset after receiving success response. This is useful\r\n         * when invisible captcha need to be resolved multiple times on same page\r\n         */\r\n        this.resetCaptchaAfterSuccess = false;\r\n        /**\r\n         * Required by ControlValueAccessor\r\n         */\r\n        this.onChange = (val) => { };\r\n        this.onTouched = (val) => { };\r\n        /**\r\n         * Indicates if captcha is loaded\r\n         */\r\n        this.isLoaded = false;\r\n    }\r\n    ngAfterViewInit() {\r\n        this.control = this.injector.get(NgControl, undefined, InjectFlags.Optional)?.control;\r\n    }\r\n    ngAfterViewChecked() {\r\n        if (this.setupCaptcha) {\r\n            this.setupCaptcha = false;\r\n            this.setupComponent();\r\n        }\r\n    }\r\n    ngOnChanges(changes) {\r\n        // cleanup scripts if language changed because they need to be reloaded\r\n        if (changes && changes.hl) {\r\n            // cleanup scripts when language changes\r\n            if (!changes.hl.firstChange &&\r\n                changes.hl.currentValue !== changes.hl.previousValue) {\r\n                this.scriptService.cleanup();\r\n            }\r\n        }\r\n        if (changes && changes.useGlobalDomain) {\r\n            // cleanup scripts when domain changes\r\n            if (!changes.useGlobalDomain.firstChange &&\r\n                changes.useGlobalDomain.currentValue !==\r\n                    changes.useGlobalDomain.previousValue) {\r\n                this.scriptService.cleanup();\r\n            }\r\n        }\r\n        this.setupCaptcha = true;\r\n    }\r\n    /**\r\n     * Gets captcha response as per reCaptcha docs\r\n     */\r\n    getResponse() {\r\n        return this.reCaptchaApi.getResponse(this.captchaId);\r\n    }\r\n    /**\r\n     * Gets Id of captcha widget\r\n     */\r\n    getCaptchaId() {\r\n        return this.captchaId;\r\n    }\r\n    /**\r\n     * Resets captcha\r\n     */\r\n    resetCaptcha() {\r\n        this.zone.run(() => {\r\n            // reset captcha using Google js api\r\n            this.reCaptchaApi.reset();\r\n            // required due to forms\r\n            this.onChange(undefined);\r\n            this.onTouched(undefined);\r\n            // trigger reset event\r\n            this.reset.next();\r\n        });\r\n    }\r\n    /**\r\n     * Gets last submitted captcha response\r\n     */\r\n    getCurrentResponse() {\r\n        return this.currentResponse;\r\n    }\r\n    /**\r\n     * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them\r\n     */\r\n    reloadCaptcha() {\r\n        this.setupComponent();\r\n    }\r\n    ensureCaptchaElem(captchaElemId) {\r\n        const captchaElem = document.getElementById(captchaElemId);\r\n        if (!captchaElem) {\r\n            throw Error(`Captcha element with id '${captchaElemId}' was not found`);\r\n        }\r\n        // assign captcha alem\r\n        this.captchaElem = captchaElem;\r\n    }\r\n    /**\r\n     * Responsible for instantiating captcha element\r\n     */\r\n    renderReCaptcha() {\r\n        // run outside angular zone due to timeout issues when testing\r\n        // details: https://github.com/Enngage/ngx-captcha/issues/26\r\n        this.zone.runOutsideAngular(() => {\r\n            // to fix reCAPTCHA placeholder element must be an element or id\r\n            // https://github.com/Enngage/ngx-captcha/issues/96\r\n            setTimeout(() => {\r\n                this.captchaId = this.reCaptchaApi.render(this.captchaElemId, this.getCaptchaProperties());\r\n                this.ready.next();\r\n            }, 0);\r\n        });\r\n    }\r\n    /**\r\n     * Called when captcha receives response\r\n     * @param callback Callback\r\n     */\r\n    handleCallback(callback) {\r\n        this.currentResponse = callback;\r\n        this.success.next(callback);\r\n        this.zone.run(() => {\r\n            this.onChange(callback);\r\n            this.onTouched(callback);\r\n        });\r\n        if (this.resetCaptchaAfterSuccess) {\r\n            this.resetCaptcha();\r\n        }\r\n    }\r\n    getPseudoUniqueNumber() {\r\n        return new Date().getUTCMilliseconds() + Math.floor(Math.random() * 9999);\r\n    }\r\n    setupComponent() {\r\n        // captcha specific setup\r\n        this.captchaSpecificSetup();\r\n        // create captcha wrapper\r\n        this.createAndSetCaptchaElem();\r\n        this.scriptService.registerCaptchaScript({\r\n            useGlobalDomain: this.useGlobalDomain,\r\n            useEnterprise: this.useEnterprise,\r\n        }, \"explicit\", (grecaptcha) => {\r\n            this.onloadCallback(grecaptcha);\r\n        }, this.hl);\r\n    }\r\n    /**\r\n     * Called when google's recaptcha script is ready\r\n     */\r\n    onloadCallback(grecapcha) {\r\n        // assign reference to reCaptcha Api once its loaded\r\n        this.reCaptchaApi = grecapcha;\r\n        if (!this.reCaptchaApi) {\r\n            throw Error(`ReCaptcha Api was not initialized correctly`);\r\n        }\r\n        // loaded flag\r\n        this.isLoaded = true;\r\n        // fire load event\r\n        this.load.next();\r\n        // render captcha\r\n        this.renderReCaptcha();\r\n        // setup component if it was flagged as such\r\n        if (this.setupAfterLoad) {\r\n            this.setupAfterLoad = false;\r\n            this.setupComponent();\r\n        }\r\n    }\r\n    generateNewElemId() {\r\n        return this.captchaElemPrefix + this.getPseudoUniqueNumber();\r\n    }\r\n    createAndSetCaptchaElem() {\r\n        // generate new captcha id\r\n        this.captchaElemId = this.generateNewElemId();\r\n        if (!this.captchaElemId) {\r\n            throw Error(`Captcha elem Id is not set`);\r\n        }\r\n        if (!this.captchaWrapperElem) {\r\n            throw Error(`Captcha DOM element is not initialized`);\r\n        }\r\n        // remove old html\r\n        this.captchaWrapperElem.nativeElement.innerHTML = \"\";\r\n        // create new wrapper for captcha\r\n        const newElem = this.renderer.createElement(\"div\");\r\n        newElem.id = this.captchaElemId;\r\n        this.renderer.appendChild(this.captchaWrapperElem.nativeElement, newElem);\r\n        // when use captcha in cdk stepper then throwing error Captcha element with id 'ngx_captcha_id_XXXX' not found\r\n        // to fix it checking ensureCaptchaElem in timeout so that its check in next call and its able to find element\r\n        setTimeout(() => {\r\n            // update captcha elem\r\n            if (this.captchaElemId) {\r\n                this.ensureCaptchaElem(this.captchaElemId);\r\n            }\r\n        }, 0);\r\n    }\r\n    /**\r\n     * To be aligned with the ControlValueAccessor interface we need to implement this method\r\n     * However as we don't want to update the recaptcha, this doesn't need to be implemented\r\n     */\r\n    writeValue(obj) { }\r\n    /**\r\n     * This method helps us tie together recaptcha and our formControl values\r\n     */\r\n    registerOnChange(fn) {\r\n        this.onChange = fn;\r\n    }\r\n    /**\r\n     * At some point we might be interested whether the user has touched our component\r\n     */\r\n    registerOnTouched(fn) {\r\n        this.onTouched = fn;\r\n    }\r\n    /**\r\n     * Handles error callback\r\n     */\r\n    handleErrorCallback() {\r\n        this.zone.run(() => {\r\n            this.onChange(undefined);\r\n            this.onTouched(undefined);\r\n        });\r\n        this.error.next();\r\n    }\r\n    /**\r\n     * Handles expired callback\r\n     */\r\n    handleExpireCallback() {\r\n        this.expire.next();\r\n        // reset captcha on expire callback\r\n        this.resetCaptcha();\r\n    }\r\n}\r\n/** @nocollapse */ BaseReCaptchaComponentDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: BaseReCaptchaComponentDirective, deps: [{ token: i0.Renderer2 }, { token: i0.NgZone }, { token: i0.Injector }, { token: ScriptService }], target: i0.ɵɵFactoryTarget.Directive });\r\n/** @nocollapse */ BaseReCaptchaComponentDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.4\", type: BaseReCaptchaComponentDirective, inputs: { siteKey: \"siteKey\", useGlobalDomain: \"useGlobalDomain\", useEnterprise: \"useEnterprise\", type: \"type\", hl: \"hl\", tabIndex: \"tabIndex\" }, outputs: { success: \"success\", load: \"load\", reset: \"reset\", ready: \"ready\", error: \"error\", expire: \"expire\" }, usesOnChanges: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: BaseReCaptchaComponentDirective, decorators: [{\r\n            type: Directive\r\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.NgZone }, { type: i0.Injector }, { type: ScriptService }]; }, propDecorators: { siteKey: [{\r\n                type: Input\r\n            }], useGlobalDomain: [{\r\n                type: Input\r\n            }], useEnterprise: [{\r\n                type: Input\r\n            }], type: [{\r\n                type: Input\r\n            }], hl: [{\r\n                type: Input\r\n            }], tabIndex: [{\r\n                type: Input\r\n            }], success: [{\r\n                type: Output\r\n            }], load: [{\r\n                type: Output\r\n            }], reset: [{\r\n                type: Output\r\n            }], ready: [{\r\n                type: Output\r\n            }], error: [{\r\n                type: Output\r\n            }], expire: [{\r\n                type: Output\r\n            }] } });\n\nvar ReCaptchaType;\r\n(function (ReCaptchaType) {\r\n    ReCaptchaType[ReCaptchaType[\"InvisibleReCaptcha\"] = 0] = \"InvisibleReCaptcha\";\r\n    ReCaptchaType[ReCaptchaType[\"ReCaptcha2\"] = 1] = \"ReCaptcha2\";\r\n})(ReCaptchaType || (ReCaptchaType = {}));\n\nclass InvisibleReCaptchaComponent extends BaseReCaptchaComponentDirective {\r\n    constructor(renderer, zone, injector, scriptService) {\r\n        super(renderer, zone, injector, scriptService);\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.injector = injector;\r\n        this.scriptService = scriptService;\r\n        /**\r\n         * This size representing invisible captcha\r\n         */\r\n        this.size = 'invisible';\r\n        /**\r\n         * Theme\r\n         */\r\n        this.theme = 'light';\r\n        /**\r\n         * Badge\r\n         */\r\n        this.badge = 'bottomright';\r\n        this.recaptchaType = ReCaptchaType.InvisibleReCaptcha;\r\n    }\r\n    ngOnChanges(changes) {\r\n        super.ngOnChanges(changes);\r\n    }\r\n    /**\r\n     * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.\r\n     */\r\n    execute() {\r\n        // execute captcha\r\n        this.zone.runOutsideAngular(() => this.reCaptchaApi.execute(this.captchaId));\r\n    }\r\n    captchaSpecificSetup() {\r\n    }\r\n    /**\r\n    * Gets reCaptcha properties\r\n    */\r\n    getCaptchaProperties() {\r\n        return {\r\n            'sitekey': this.siteKey,\r\n            'callback': (response) => this.zone.run(() => this.handleCallback(response)),\r\n            'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\r\n            'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\r\n            'badge': this.badge,\r\n            'type': this.type,\r\n            'tabindex': this.tabIndex,\r\n            'size': this.size,\r\n            'theme': this.theme\r\n        };\r\n    }\r\n}\r\n/** @nocollapse */ InvisibleReCaptchaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: InvisibleReCaptchaComponent, deps: [{ token: i0.Renderer2 }, { token: i0.NgZone }, { token: i0.Injector }, { token: ScriptService }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ InvisibleReCaptchaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.4\", type: InvisibleReCaptchaComponent, selector: \"ngx-invisible-recaptcha\", inputs: { theme: \"theme\", badge: \"badge\" }, providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef((() => InvisibleReCaptchaComponent)),\r\n            multi: true,\r\n        }\r\n    ], viewQueries: [{ propertyName: \"captchaWrapperElem\", first: true, predicate: [\"captchaWrapperElem\"], descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: `\r\n  <div #captchaWrapperElem></div>`, isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: InvisibleReCaptchaComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'ngx-invisible-recaptcha',\r\n                    template: `\r\n  <div #captchaWrapperElem></div>`,\r\n                    providers: [\r\n                        {\r\n                            provide: NG_VALUE_ACCESSOR,\r\n                            useExisting: forwardRef((() => InvisibleReCaptchaComponent)),\r\n                            multi: true,\r\n                        }\r\n                    ]\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.NgZone }, { type: i0.Injector }, { type: ScriptService }]; }, propDecorators: { theme: [{\r\n                type: Input\r\n            }], badge: [{\r\n                type: Input\r\n            }], captchaWrapperElem: [{\r\n                type: ViewChild,\r\n                args: ['captchaWrapperElem', { static: false }]\r\n            }] } });\n\nclass ReCaptcha2Component extends BaseReCaptchaComponentDirective {\r\n    constructor(renderer, zone, injector, scriptService) {\r\n        super(renderer, zone, injector, scriptService);\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.injector = injector;\r\n        this.scriptService = scriptService;\r\n        /**\r\n        * Name of the global expire callback\r\n        */\r\n        this.windowOnErrorCallbackProperty = 'ngx_captcha_error_callback';\r\n        /**\r\n        * Name of the global error callback\r\n        */\r\n        this.windowOnExpireCallbackProperty = 'ngx_captcha_expire_callback';\r\n        /**\r\n         * Theme\r\n         */\r\n        this.theme = 'light';\r\n        /**\r\n        * Size\r\n        */\r\n        this.size = 'normal';\r\n        this.recaptchaType = ReCaptchaType.ReCaptcha2;\r\n    }\r\n    ngOnChanges(changes) {\r\n        super.ngOnChanges(changes);\r\n    }\r\n    ngOnDestroy() {\r\n        window[this.windowOnErrorCallbackProperty] = {};\r\n        window[this.windowOnExpireCallbackProperty] = {};\r\n    }\r\n    captchaSpecificSetup() {\r\n        this.registerCallbacks();\r\n    }\r\n    /**\r\n     * Gets reCaptcha properties\r\n    */\r\n    getCaptchaProperties() {\r\n        return {\r\n            'sitekey': this.siteKey,\r\n            'callback': (response) => this.zone.run(() => this.handleCallback(response)),\r\n            'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\r\n            'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\r\n            'theme': this.theme,\r\n            'type': this.type,\r\n            'size': this.size,\r\n            'tabindex': this.tabIndex\r\n        };\r\n    }\r\n    /**\r\n     * Registers global callbacks\r\n    */\r\n    registerCallbacks() {\r\n        window[this.windowOnErrorCallbackProperty] = super.handleErrorCallback.bind(this);\r\n        window[this.windowOnExpireCallbackProperty] = super.handleExpireCallback.bind(this);\r\n    }\r\n}\r\n/** @nocollapse */ ReCaptcha2Component.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ReCaptcha2Component, deps: [{ token: i0.Renderer2 }, { token: i0.NgZone }, { token: i0.Injector }, { token: ScriptService }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ ReCaptcha2Component.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.4\", type: ReCaptcha2Component, selector: \"ngx-recaptcha2\", inputs: { theme: \"theme\", size: \"size\" }, providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef((() => ReCaptcha2Component)),\r\n            multi: true,\r\n        }\r\n    ], viewQueries: [{ propertyName: \"captchaWrapperElem\", first: true, predicate: [\"captchaWrapperElem\"], descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: `\r\n  <div #captchaWrapperElem></div>`, isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ReCaptcha2Component, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'ngx-recaptcha2',\r\n                    template: `\r\n  <div #captchaWrapperElem></div>`,\r\n                    providers: [\r\n                        {\r\n                            provide: NG_VALUE_ACCESSOR,\r\n                            useExisting: forwardRef((() => ReCaptcha2Component)),\r\n                            multi: true,\r\n                        }\r\n                    ]\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.NgZone }, { type: i0.Injector }, { type: ScriptService }]; }, propDecorators: { theme: [{\r\n                type: Input\r\n            }], size: [{\r\n                type: Input\r\n            }], captchaWrapperElem: [{\r\n                type: ViewChild,\r\n                args: ['captchaWrapperElem', { static: false }]\r\n            }] } });\n\nclass ReCaptchaV3Service {\r\n    constructor(scriptService, zone) {\r\n        this.scriptService = scriptService;\r\n        this.zone = zone;\r\n    }\r\n    /**\r\n     * Executes reCaptcha v3/Enterprise with given action and passes token via callback. You need to verify\r\n     * this callback in your backend to get meaningful results.\r\n     *\r\n     * For more information see https://developers.google.com/recaptcha/docs/v3\r\n     * For enterprise see https://cloud.google.com/recaptcha-enterprise/docs\r\n     *\r\n     * @param siteKey Site key found in your google admin panel\r\n     * @param action Action to log\r\n     * @param callback Callback function to to handle token\r\n     * @param config Optional configuration like useGlobalDomain to be provided\r\n     * @param errorCallback Optional Callback function to handle errors\r\n     */\r\n    execute(siteKey, action, callback, config, errorCallback) {\r\n        this.executeAsPromise(siteKey, action, config)\r\n            .then(callback)\r\n            .catch((error) => errorCallback ? errorCallback(error) : console.error(error));\r\n    }\r\n    /**\r\n     * Executes reCaptcha v3/Enterprise with given action and returns token via Promise. You need to verify\r\n     * this token in your backend to get meaningful results.\r\n     *\r\n     * For more information see https://developers.google.com/recaptcha/docs/v3\r\n     * For enterprise see https://cloud.google.com/recaptcha-enterprise/docs\r\n     *\r\n     * @param siteKey Site key found in your google admin panel\r\n     * @param action Action to log\r\n     * @param config Optional configuration like useGlobalDomain to be provided\r\n     */\r\n    executeAsPromise(siteKey, action, config) {\r\n        return new Promise((resolve, reject) => {\r\n            const configuration = config || {};\r\n            const onRegister = (grecaptcha) => {\r\n                this.zone.runOutsideAngular(() => {\r\n                    try {\r\n                        grecaptcha\r\n                            .execute(siteKey, { action })\r\n                            .then((token) => this.zone.run(() => resolve(token)));\r\n                    }\r\n                    catch (error) {\r\n                        reject(error);\r\n                    }\r\n                });\r\n            };\r\n            this.scriptService.registerCaptchaScript(configuration, siteKey, onRegister);\r\n        });\r\n    }\r\n}\r\n/** @nocollapse */ ReCaptchaV3Service.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ReCaptchaV3Service, deps: [{ token: ScriptService }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\r\n/** @nocollapse */ ReCaptchaV3Service.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ReCaptchaV3Service, providedIn: \"root\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ReCaptchaV3Service, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: \"root\",\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: ScriptService }, { type: i0.NgZone }]; } });\n\nclass NgxCaptchaModule {\r\n}\r\n/** @nocollapse */ NgxCaptchaModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NgxCaptchaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ NgxCaptchaModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.4\", ngImport: i0, type: NgxCaptchaModule, declarations: [ReCaptcha2Component,\r\n        InvisibleReCaptchaComponent], imports: [CommonModule], exports: [ReCaptcha2Component,\r\n        InvisibleReCaptchaComponent] });\r\n/** @nocollapse */ NgxCaptchaModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NgxCaptchaModule, providers: [\r\n        ScriptService,\r\n        ReCaptchaV3Service\r\n    ], imports: [CommonModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NgxCaptchaModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [\r\n                        CommonModule\r\n                    ],\r\n                    declarations: [\r\n                        ReCaptcha2Component,\r\n                        InvisibleReCaptchaComponent\r\n                    ],\r\n                    providers: [\r\n                        ScriptService,\r\n                        ReCaptchaV3Service\r\n                    ],\r\n                    exports: [\r\n                        ReCaptcha2Component,\r\n                        InvisibleReCaptchaComponent\r\n                    ]\r\n                }]\r\n        }] });\n\n/*\r\n * Public API\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { BaseReCaptchaComponentDirective, InvisibleReCaptchaComponent, NgxCaptchaModule, ReCaptcha2Component, ReCaptchaType, ReCaptchaV3Service, ScriptService };\n"],"x_google_ignoreList":[1]}